{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Index page</p>"},{"location":"00.Preface/0.1-Welcome/","title":"0.1 Welcome","text":"<p>This course is intended for students that are studying for Computing SEC 09 based on the 2026 syllabus. This course tackles Learning Outcome 13 (LO13) where students should be able to develop programs using Python programming language that includes textual and graphical interfaces.</p> <p> </p> <p></p> <p> </p>"},{"location":"00.Preface/0.1-Welcome/#01a-welcome-to-python-programming","title":"0.1a Welcome to Python programming","text":"<p>Welcome to the world of Python programming! As you embark on this journey, you'll discover how programming can transform your ability to solve problems, automate tasks, and create innovative solutions. Programming is a critical skill in today's digital age, and it empowers you to tackle challenges in various fields, from science and engineering to art and entertainment.</p>"},{"location":"00.Preface/0.1-Welcome/#01b-the-importance-of-programming","title":"0.1b The importance of programming","text":"<p>Programming is the backbone of the modern world. It drives the technology behind your favorite apps, the websites you visit, and the games you play. Learning to program helps you develop logical thinking and problem-solving skills. You'll learn how to break down complex problems into manageable parts, and create efficient solutions. These skills are not only valuable in computing but also in everyday life and in any career you choose.</p> <p>At the end of the course, you should be able to develop programs using Python programming language that includes textual and graphical interfaces.</p> <p> </p> <p> </p> <p>Note</p> <p>This tutorial is based on answers provided by ChatGPT-4 and has been carefully compiled and edited by C\u00e9dric F. to create a comprehensive and engaging learning resource for students.</p>"},{"location":"00.Preface/0.2-Why-Python/","title":"0.2 Why Python","text":"<p>Python is one of the most popular programming languages today, and for good reasons:</p> <ul> <li> <p>Ease of learning - Python's simple and readable syntax makes it an ideal language for beginners. It's designed to be easy to understand and write, allowing you to focus on learning programming concepts without getting bogged down by complex syntax.</p> </li> <li> <p>Versatility - Python is incredibly versatile. It\u2019s used in web development, data analysis, artificial intelligence, scientific computing, and more. Whether you want to build websites, analyze data, or create machine learning models, Python has the tools you need.</p> </li> <li> <p>Community and support - Python has a large and active community. This means that there are plenty of resources, tutorials, and libraries available to help you. Whether you're facing a coding challenge or looking for advice, you're never alone in the Python community.</p> </li> <li> <p>Fun and engaging - Python makes programming fun! With its interactive nature, you can quickly see the results of your code and experiment with different ideas. You can also create exciting projects, like games or graphical interfaces, that make learning enjoyable.</p> </li> </ul> <p>The fun and ease of Python coding Python\u2019s simplicity and readability make it fun and easy to code with. You can quickly get started with small projects and see your progress. Python's interactive environment allows you to test out code snippets and get immediate feedback, which is both rewarding and educational. Plus, Python's extensive libraries and frameworks mean you can build sophisticated applications with minimal code.</p>"},{"location":"00.Preface/0.3-Career-opportunities-with-python/","title":"0.3 Career opportunities with python","text":"<p>Learning Python opens the door to a wide range of career opportunities. </p>"},{"location":"00.Preface/0.3-Career-opportunities-with-python/#03a-here-are-some-of-the-roles-you-could-pursue","title":"0.3a Here are some of the roles you could pursue: <ul> <li> <p> Software Developer - Software developers use Python to design and create various software applications ranging from desktop programs to mobile apps. They write, test, and maintain code to ensure software functions effectively and meets user needs.</p> <ul> <li>Common Python Libraries: PyQt or Tkinter for GUI applications.</li> </ul> </li> <li> <p>Data Scientist - Data scientists leverage Python to analyze and interpret complex data sets to help businesses make informed decisions. They use statistical techniques, machine learning, and data visualisation to extract insights from data.</p> <ul> <li>Common Python Libraries: Pandas for data manipulation and Matplotlib or Seaborn for data visualisation.</li> </ul> </li> <li> <p>Web Developer - Web developers use Python to build and maintain websites and web applications. They handle both the server-side (back-end) and client-side (front-end) development, ensuring websites are functional, secure, and user-friendly.</p> <ul> <li>Common Python Libraries: Django or Flask for web frameworks.</li> </ul> </li> <li> <p>Artifical Intelligence / Machine Learning (AI/ML) Engineer - AI/ML engineers develop artificial intelligence and machine learning models to create systems that can learn and make decisions. They work on algorithms for tasks such as image recognition, natural language processing, and predictive analytics.</p> <ul> <li>Common Python Libraries: TensorFlow or PyTorch for machine learning.</li> </ul> </li> <li> <p>System Administrator - System administrators use Python to manage and maintain computer systems and networks. They write scripts to automate repetitive tasks, monitor system performance, and ensure the security and efficiency of IT infrastructure.</p> <ul> <li>Common Python Library: Ansible for automation and configuration management.</li> </ul> </li> <li> <p>Game Developer Game developers create engaging video games using Python. They design game mechanics, develop storylines, and implement graphics and sound effects to provide an immersive gaming experience.</p> <ul> <li>Common Python Library: Pygame for game development.</li> </ul> </li> </ul> <p> </p>","text":""},{"location":"00.Preface/0.3-Career-opportunities-with-python/#03b-python-can-also-be-beneficial-in-various-other-careers-such-as","title":"0.3b Python can also be beneficial in various other careers such as: <p>1. Accounting and Finance - Python can automate tasks such as data entry, generating invoices, and reconciling accounts. One can use Python libraries like Pandas and NumPy to analyze financial data, create reports, and visualize trends. <p>2. Engineering - One can use Python for simulations in fields like mechanical, civil, and electrical engineering (e.g., using libraries such as SimPy). With Python one can handle large datasets from experiments or simulations, perform data cleaning, and analyze results. One can also rapidly prototype engineering solutions and test their feasibility.</p> <p>3. Healthcare - One can analyze patient data to identify trends, improve diagnostics, and personalize treatments. One can also process and analyze biological data, such as genomic sequences, using libraries like Biopython. Python is also used to automate data collection and analysis in clinical trials and research labs.</p> <p>4. Education - One can develop interactive learning applications and tools for students. One can use Python to analyze research data and publish findings or to automate administrative tasks like scheduling, attendance tracking, and grading.</p> <p>5. Environmental Science - We can use Python to collect and analyze environmental data, such as climate patterns, pollution levels, and biodiversity metrics. Python can be used to create models to simulate environmental phenomena and predict future trends.</p> <p>Python's extensive libraries and frameworks make it a powerful tool for professionals in many industries, allowing for increased efficiency, better data analysis, and the development of innovative solutions.</p>","text":""},{"location":"00.Preface/0.4-Happy-coding/","title":"0.4 Happy coding","text":"<p>However, becoming a proficient programmer takes practice. The more you code, the better you'll get. Don\u2019t be discouraged by challenges; every problem you solve improves your skills and brings you closer to mastering Python.</p> <p>Programming is a powerful tool that can open many doors in your future career. Python, with its simplicity and versatility, is a great place to start. Remember, practice is key to becoming a good programmer. Keep coding, stay curious, and enjoy the process of learning and creating with Python. </p> <p>Happy coding!</p>"},{"location":"01.Introduction/1.1-Setting-up-the-environment/","title":"1.1 Setting up the environment","text":""},{"location":"01.Introduction/1.1-Setting-up-the-environment/#11a-recommended-environment","title":"1.1a Recommended environment <p>Although there is no need to install an IDE to follow this course, I suggest to setup Thonny IDE since MATSEC requests that the development should be done using this IDE. Thonny IDE is very easy to get started and it comes with Python built in, so just one simple installer is needed and you're ready to learn programming.</p> <p>  </p> <p>Throughout this course you can also use the Trinket Code Interactive Python as displayed below. </p> <p>At the end of each tutorial section you should be able to find a Trinket Code Interactive Python where you can practice the examples in the corresponding section and workout the exercice that should be found under each topic.</p> <p>You can also find some tips &amp; tricks on how to use the Trinket Code Interactive Python here.</p>","text":""},{"location":"01.Introduction/1.1-Setting-up-the-environment/#11b-alternative-environment","title":"1.1b Alternative environment <p>If you prefer to use another IDE/Text Editor you can follow the following steps: - Download and install Python from the official website python.org.</p> <ul> <li> <p>Make sure to check the box to add Python to your PATH during installation.</p> </li> <li> <p>Select an IDE: </p> <ul> <li>PyCharm</li> <li>Visual Studio Code (VS Code)</li> <li>Spyder</li> <li>Thonny IDE</li> <li>Built-in: IDLE (comes with Python installation)</li> </ul> </li> </ul>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/","title":"1.2 Basic syntax and concepts","text":"<p>Let's get an overview of Python's basic syntax and main concepts that we will be covering during this course.</p>"},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12a-python-syntax","title":"1.2a Python syntax <p>Throughout the whole course, we will be focusing on various Python syntax . However we feel that the following three areas should be stated immediately since they're very useful. </p> <ul> <li> <p>Case sensitivity - Python is case-sensitive, meaning <code>Variable</code> and <code>variable</code> are different identifiers.</p> </li> <li> <p>Indentation - In Python, indentation is used to group statements together to form a block of code. This is explained in detail here.</p> </li> <li> <p>Comments - These are explained proper detail here.</p> <ul> <li>Single-line comments start with a <code>#</code>.</li> <li>Multi-line comments can be written with triple quotes (<code>'''</code> or <code>\"\"\"</code>).</li> </ul> </li> </ul> <p>Example 1.2.1 - Single line and multi-line comments     <pre><code># This is a single-line comment\n\n'''\nThis is a \nmulti-line comment\n'''\n\n\"\"\"\nThis is also a\nmulti-line comment\n\"\"\"\n</code></pre> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12b-variables-and-data-types","title":"1.2b Variables and data types <ul> <li> <p>Variables are used to store data values.</p> </li> <li> <p>Variable names must start with a letter or underscore, followed by letters, numbers, or underscores.</p> </li> </ul> <p>These will be covered in Topic 2 - Variables &amp; Input.</p> <p>Example 1.2.2 - Variables <pre><code>score = 5\nname = \"Thea\"\nis_student = True\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12c-output","title":"1.2c Output <p>Then we move on to the output topic and we use the classic simple 'Hello World!' example.</p> <p>Example 1.2.3 - Basic print statement <pre><code>print(\"Hello, World!\")\n</code></pre> We shall explore various features of the <code>print()</code> function and the useful features of the F-Strings.</p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12d-operators","title":"1.2d Operators <p>Arithmetic operators are symbols in programming languages that perform mathematical operations on numbers. Hence we will understand how to use basic arithmetic operations like:</p> <ul> <li>+ (addition) </li> <li>- (subtraction) </li> <li>* (multiplication) </li> <li>/ (division) </li> <li>% (modulus)</li> <li>** (exponentiation) </li> <li>// (floor division)</li> </ul> <p>Example 1.2.4 - <code>+</code> (addition) operator <pre><code>3 + 2\n</code></pre> </p> <p>In this topic, we will also understand how to use assignment operator to assign values to variables.</p> <p>Example 1.2.5 - <code>+=</code> (add and assign) operator <pre><code>x += 3\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12e-decisions-conditional-statements","title":"1.2e Decisions (conditional) statements <p>In topic 5, we shall understand the conditional statements with <code>if</code>, <code>elif</code> and <code>else</code>. We will also explore the nested decision statements that are just statements placed inside another decisions statements.</p> <p>We will use the following comparison operators to practice decision examples:</p> <ul> <li>== (equal)</li> <li>!= (not equal)</li> <li>&gt; (greater than)</li> <li>&lt; (less than)</li> <li>&gt;= (greater than or equal to)</li> <li>&lt;= (less than or equal to)</li> </ul> <p>We will also practice with the following logical operators to practice more decision examples:</p> <ul> <li>and</li> <li>or</li> <li>not</li> </ul> <p>Example 1.2.6 - Conditional operator <code>!=</code></p> <pre><code>input != 0\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12f-iterations-loops","title":"1.2f Iterations (loops) <p>Python loops are constructs that allow you to execute a block of code repeatedly, based on a condition or a sequence. We need to understand the need and use of the <code>for-in</code> and <code>while</code> loops. Here we will explore that <code>while</code> loop can be paired with an <code>else</code> block. Nested loops will also be explored here, and we will be exploring the loop control statements - <code>break</code>, <code>continue</code> and <code>pass</code>. These will be covered here.</p> <p>Example 1.2.7 - Basic <code>for-in</code> loop</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12g-functions-and-modules","title":"1.2g Functions and modules <p>A Python function is a block of reusable code designed to perform a specific task whereas a Python module is a file containing Python definitions and statements.</p> <p>In topic 7, we will be explaining the distinction between Python functions and modules, highlighting how they serve different purposes in code organization and reuse. </p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12h-data-structures","title":"1.2h Data structures <p>Python provides several built-in data structures to help organize and manage data efficiently. In this topic, we will be explaining data structures, which are organized ways to store, manage, and manipulate data efficiently. Specifically, we will tackle lists, tuples, and dictionaries, exploring their unique characteristics and use cases. </p> <p>Example 1.2.8 - Python list</p> <pre><code>fruits = ['apple', 'banana', 'cherry']\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12i-graphical-interface","title":"1.2i Graphical interface <p>In this particular topic, we will be explaining how to develop a program that includes a graphical interface using the Turtle module and/or the Tkinter module. These modules allow you to create visual elements and interactive components in your Python programs, enabling you to design more engaging and user-friendly applications. By the end of this topic, you will have the skills to build and customize graphical interfaces, enhancing the overall functionality and appeal of your projects.</p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.2-Basic-syntax-and-concepts/#12j-good-programming-practices","title":"1.2j Good programming practices <p>Good programming practices are important because they improve code readability and maintainability and facilitate debugging and troubleshooting. In the last topic, we will be explaining good programming practices, including the use of inline comments, block comments, multi-line strings or docstrings, code indentation, and meaningful variable names. These practices are crucial for writing clear, maintainable, and readable code. Proper code indentation ensures that the structure of the code is visually apparent, and meaningful variable names make the code self-explanatory. Adhering to these practices enhances collaboration, debugging, and future modifications.</p> <p> </p>  <p> </p>  <p>Note</p> <p>Python's syntax is designed to be clean and readable, making it an excellent language for beginners. Understanding these basic concepts and syntax will give you a solid foundation to start coding in Python and progress to more advanced topics.</p>","text":""},{"location":"01.Introduction/1.3-Indentation/","title":"1.3 Indentation","text":"<p>Indentation is a crucial aspect of Python programming that defines the structure and flow of your code. Unlike many other programming languages that use braces {} to define blocks of code, Python relies on indentation (whitespace) to denote code blocks.</p>"},{"location":"01.Introduction/1.3-Indentation/#13a-what-is-indentation","title":"1.3a What is indentation? <p>Indentation refers to the spaces or tabs at the beginning of a line of code. In Python, indentation is used to group statements together to form a block of code.</p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.3-Indentation/#13b-why-is-indentation-important-in-python","title":"1.3b Why is indentation important in Python? <ul> <li> <p>Defines Code Blocks - In Python, the level of indentation determines which statements are part of the same block. This is essential for control structures such as loops, conditionals, and function definitions.</p> </li> <li> <p>Enhances Readability - Indentation improves the readability of the code by visually separating different blocks of code, making it easier to understand the structure and flow of the program.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.3-Indentation/#13c-rules-for-indentation-in-python","title":"1.3c Rules for indentation in Python <ul> <li> <p>Consistent Indentation- All lines of code in a block must have the same level of indentation. Mixing spaces and tabs is discouraged and can lead to errors.</p> </li> <li> <p>Indentation Levels - A standard practice is to use 4 spaces per indentation level, although other conventions (such as 2 spaces) are also acceptable as long as you are consistent.</p> </li> <li> <p>Indentation Errors - Incorrect indentation will result in an IndentationError. For example, if the indentation is inconsistent within a block, Python will raise an error.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.3-Indentation/#13d-common-indentation-errors","title":"1.3d Common indentation errors <p>Example 1.3.1 - Inconsistent indentation <pre><code>if x &gt; 5:\n  print(\"x is greater than 5\")  # Using 2 spaces\n    print(\"This will cause an error\")  # Using 4 spaces\n</code></pre></p> <p> </p> <p>Example 1.3.2 - Missing indentation <pre><code>for i in range(3):\nprint(i)  # This line is not indented\n</code></pre></p> <p> </p> <p>Example 1.3.3 - Mixing tabs and spaces <pre><code>if x &gt; 5:\n    print(\"x is greater than 5\")  # Using spaces\n    print(\"This will cause an error\")  # Using a tab\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"01.Introduction/1.3-Indentation/#13e-best-practices","title":"1.3e Best practices <ul> <li> <p>Use Spaces, Not Tabs - It is recommended to use spaces instead of tabs for indentation. Most Python style guides, including PEP 8, recommend using 4 spaces per indentation level.</p> </li> <li> <p>Consistent Indentation - Be consistent with your indentation throughout your code to avoid errors and improve readability.</p> </li> <li> <p>Code Editors - Use a code editor or IDE that supports Python and automatically handles indentation for you, such as Thonny IDE, Visual Studio Code, PyCharm, or even IDLE.</p> </li> </ul> <p> </p>  <p> </p>  <p>Note</p> <p>Indentation in Python is not just a matter of style but a fundamental part of the language's syntax. Proper indentation is essential for defining the structure and flow of your code. By adhering to consistent indentation practices, you ensure that your code is both functional and readable.</p>","text":""},{"location":"02.Variables-and-input/2.1-What-is-a-variable/","title":"2.1 What is a variable","text":"<p>A variable in programming is a name that holds a value, like a box that you can store something in and refer to later. In Python, a variable is a named reference to a memory location where a value is stored.</p> <p> </p> <p></p> <p> </p> <p>We may use variables for:</p> <ul> <li>Readability and Maintenance - Variables with meaningful names make the code easier to read and understand. Refer to section 2.2 Variable naming for more info.</li> </ul> <p>Example 2.1.1</p> <pre><code>total_price = 150\n</code></pre> <p> </p> <ul> <li>Reusability - Storing data in variables allows for reuse of the data without hardcoding values multiple times.</li> </ul> <p>Example 2.1.2</p> <pre><code>tax_rate = 0.08\ntotal_tax = total_price * tax_rate\n</code></pre> <p> </p> <ul> <li>Dynamic Data Handling - Variables allow programs to handle dynamic data input, making them flexible. User input is addressed in 2.5 Input statement topic.</li> </ul> <p>Example 2.1.3</p> <pre><code>user_input = input(\"Enter your name: \")\nprint(f\"Hello, {user_input}\")\n</code></pre> <p> </p> <p>In summary, variables in programming are essential tools for storing, retrieving, and manipulating data, which enhances code readability, reusability, and overall efficiency.</p>"},{"location":"02.Variables-and-input/2.2-Variable-naming/","title":"2.2 Variable naming","text":"<p>When naming variables in Python, there are specific rules and conventions to follow. Adhering to these guidelines helps in writing clear, readable, and maintainable code.</p>"},{"location":"02.Variables-and-input/2.2-Variable-naming/#22a-rules-for-variable-naming","title":"2.2a Rules for variable naming <ol> <li> <p>Starting character - Variable names must start with a letter (a-z, A-Z) or an underscore (_). They cannot start with a number.</p> </li> <li> <p>Subsequent characters - After the first character, variable names can include letters, numbers (0-9), and underscores.</p> </li> <li> <p>Case sensitivity - Variable names are case-sensitive. For example, <code>variable</code>, <code>Variable</code>, and <code>VARIABLE</code> are three different variables.</p> </li> <li> <p>Reserved keywords - You cannot use Python reserved keywords (like <code>if</code>, <code>for</code>, <code>while</code>, <code>class</code>, <code>def</code>, etc.) as variable names. These keywords have special meanings in Python.</p> </li> </ol> <p> </p> <p>Example 2.2.1 - Examples of valid variable names <pre><code>my_variable = 10\n_myVariable = 20\nMyVariable2 = 30\nvariable123 = 40\n</code></pre> Example 2.2.2 - Examples of invalid variable names <pre><code>1variable = 10        # Cannot start with a number\nmy-variable = 20      # Hyphens are not allowed\nclass = 30            # 'class' is a reserved keyword\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"02.Variables-and-input/2.2-Variable-naming/#22b-python-variable-naming-conventions","title":"2.2b Python variable naming conventions <p>To write code that is easy to read and understand, Python programmers follow certain naming conventions. Here are some widely accepted conventions:</p> <p>1. Snake case - Use snake_case for variable names. This means using lowercase letters and separating words with underscores. - Example: <code>my_variable</code>, <code>user_age</code>, <code>total_price</code>.</p> <p>2. Descriptive names - Choose meaningful and descriptive names that make the purpose of the variable clear. - Example: <code>user_age</code> is more descriptive than <code>ua</code>.</p> <p>3. Constants - Use uppercase letters with underscores separating words for constant variables (variables that should not change). - Example: <code>PI = 3.14159</code>, <code>MAX_SPEED = 120</code>.</p> <p>4. Avoid single characters - Avoid single-character variable names except for common cases like <code>i</code>, <code>j</code>, <code>k</code> in loops or <code>x</code>, <code>y</code> in mathematical operations. - Example: <code>index</code> is more descriptive than <code>i</code> (unless <code>i</code> is used in a simple loop).</p> <p> </p> <p>Example 2.2.3 - Good naming conventions <pre><code>user_name = \"kim\"\ntotal_price = 99.99\nnumber_of_items = 5\nis_active = True\nPI = 3.14159\nMAX_CONNECTIONS = 100\n</code></pre></p> <p> </p> <p>Example 2.2.4 - Poor naming conventions <pre><code>x = \"kim\"          # Not descriptive\ntp = 99.99           # Not descriptive\nn = 5                # Not descriptive\na = True             # Not descriptive\npi = 3.14159         # Constants should be uppercase\nmaxconnections = 100 # Should use underscores\n</code></pre></p> <p> </p>  <p> </p> <p>Exercise 2.2.1 - Write a small Python program by first declaring a variable called <code>first_name</code> and then set (initialize) this variable to your name.  <p><sub>Exercise 2.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"02.Variables-and-input/2.3-How-do-we-use-variables/","title":"2.3 How do we use variables","text":"<p>We use variables in several ways, mainly in:</p> <ul> <li>Declaration and Initialization - Assigning a value to a variable creates the variable and reserves a memory location for it.</li> </ul> <p>Example 2.3.1 <pre><code>age = 14\nname = \"Kim\"\n</code></pre></p> <p> </p> <ul> <li>Storing Data - Variables hold data that can be used and manipulated throughout the program.</li> </ul> <p>Example 2.3.2 <pre><code>score = 95\n</code></pre></p> <p> </p> <ul> <li>Retrieving Data - The stored value in a variable can be accessed and used in operations.</li> </ul> <p>Example 2.3.3 <pre><code>print(score)\n</code></pre> Example 2.3.3 - Output</p> <pre>\n95\n</pre> <p> </p> <ul> <li>Updating Data - Variables can be reassigned new values during the program's execution.</li> </ul> <p>Example 2.3.4 <pre><code>score = 100\n</code></pre></p> <p> </p> <p> </p> <p>Exercise 2.3.1 - Write a Python program by first declaring a variable called city. Set (initialize) city to the name of your favorite city. Print the name of your favorite city by using the city variable. <p><sup>You can refer to Output topic  if you need help with the <code>print()</code> function.</sup></p> <p><sub>Exercise 2.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"02.Variables-and-input/2.4-Different-types-of-variables/","title":"2.4 Different types of variables","text":"<p>In Python there are different types of variabes but for this course we will be focusing on the following types:</p> <ul> <li>Integer - An integer is a whole number without a decimal point.</li> </ul> <p>Example 2.4.1 <pre><code>age = 14\nprint(age)\n</code></pre> Example 2.4.1 - Output</p> <pre>\n14\n</pre> <p> </p> <ul> <li>Float - A float is a number that has a decimal point.</li> </ul> <p>Example 2.4.2 <pre><code>price = 19.99\nprint(price)\n</code></pre> Example 2.4.2 - Output</p> <pre>\n19.99\n</pre> <p> </p> <ul> <li>String - A string is a sequence of characters enclosed in quotes (single or double).</li> </ul> <p>Example 2.4.3 <pre><code>name = \"Kim\"\nprint(name)\n</code></pre> Example 2.4.3 - Output</p> <pre>\nKim\n</pre> <p> </p> <ul> <li>Boolean - A boolean is a type that can hold one of two values: True or False.</li> </ul> <p>Example 2.4.4 <pre><code>is_student = True\nprint(is_student)\n</code></pre> Example 2.4.4 - Output</p> <pre>\nTrue\n</pre> <p> </p> <p> </p> <p>Exercise 2.4.1 - Write a Python program by creating two variables. The first variable should hold your age and the second variable should hold your nationality. Finally print both values on two separate lines. <p><sup>You can refer to Output topic  if you need help with the <code>print()</code> function.</sup></p> <p><sub>Exercise 2.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"02.Variables-and-input/2.5-Input-statement/","title":"2.5 Input statement","text":"<p>The <code>input()</code> statement in Python is used to take input from the user. When <code>input()</code> is called, the program will pause and wait for the user to type something and press Enter. The input entered by the user is returned as a string.</p> <p>Syntax: <pre><code>variable = input(\"Prompt message\")\n</code></pre> The variable is the name of the variable where the input value will be stored. Whereas \"Prompt message\" is a message that is displayed to the user, indicating that input is expected. Make sure to provide a clear and concise prompt message to guide the user on what input is expected.</p> <p>Example 2.5.1</p> <p>This program prompts the user to enter their name. It then greets the user by printing \"Hello,\" followed by the name they entered.</p> <p><pre><code>name = input(\"Enter your name: \")\nprint(\"Hello \" + name)\n</code></pre> </p> <p>Please note that we could have achieved the same result using commas in the print statement. When you use commas in the <code>print()</code> function, it prints each argument separated by a space by default as displayed in Example 2.5.2. This method also automatically converts non-string arguments to strings.</p> <p>Example 2.5.2 </p> <p>The output would be the same as in example 2.5.1, but we are using the comma to print each argument separated by a space by default. </p> <p>This method is more concise and automatically handles spaces between arguments. It can handle non-string arguments without needing explicit conversion as we shuould see in section 2.6.</p> <pre><code>name = input(\"Enter your name: \")\nprint(\"Hello\", name)\n</code></pre> <p> </p> <p> </p> <p>Exercise 2.5.1 - Write a Python program by first asking the user for their first name and then ask the user for their last name. Print \"Hello\" followed by the user's first name and last name on one line, separated by a space. You can use both approaches that are mentioned above. <p><sup>You can refer to Output topic  if you need help with the <code>print()</code> function.</sup></p> <p><sub>Exercise 2.5.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"02.Variables-and-input/2.6-Type-conversion-functions/","title":"2.6 Type conversion functions","text":"<p>Type conversion functions enable flexibility and ensure that our programs can handle different types of data effectively.</p> <p>The <code>input()</code> function always returns a string. If you need a different type (like an integer or a float), you must convert it using <code>int()</code> or <code>float()</code>.</p> <p> </p>"},{"location":"02.Variables-and-input/2.6-Type-conversion-functions/#26a-input-with-integer-conversion","title":"2.6a Input with integer conversion <p>By using the type conversion function <code>int()</code>, we can convert the input string(str) to integer(int).</p> <p>Example 2.6.1 - This program asks the user to enter their age. Since <code>input()</code> returns a string, we use <code>int(age)</code> to convert the input to an integer. Then, it prints the age.</p> <pre><code>age = input(\"Enter your age: \")\nage = int(age)\nprint(\"You are\", age, \"years old.\")\n</code></pre> <p>Note that we are allowed to insert age as integer since we are using the commas in the <code>print()</code> function. This method automatically converts non-string arguments to strings.</p> <p> </p> <p>Example 2.6.2 - This example will cause a runtime error, because we can only concatenate string (str) and not int to str.</p> <pre><code>age = input(\"Enter your age: \")\nage = int(age)\nprint(\"You are \" + age + \" years old.\")\n</code></pre> <p> </p> <p>Example 2.6.3 - The following example works fine because we are treating age as text by default, and we are not converting it to a whole number. But if we wanted to do math with the age, we would have to turn it into a whole number like in example 2.6.1</p> <pre><code>age = input(\"Enter your age: \")\nprint(\"You are \" + age + \" years old.\")\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"02.Variables-and-input/2.6-Type-conversion-functions/#26b-input-with-float-conversion","title":"2.6b Input with float conversion <p>By using the type converson function <code>float()</code>, we can convert the input string to a float</p> <p>Example 2.6.4 - This program prompts the user to enter their height in meters. The input string is converted to a float using float(height) and then printed.</p> <pre><code>height = input(\"Enter your height in meters: \")\nheight = float(height)  \nprint(\"Your height is\", height, \"meters.\")\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"02.Variables-and-input/2.6-Type-conversion-functions/#26c-convert-a-value-to-a-string-with-str-function","title":"2.6c Convert a value to a string with str() function <p>The <code>str()</code> function in Python is used to convert a value into its string representation. Hence when you pass a value to <code>str()</code>, it returns a string version of that value.</p> <p>Example 2.6.5 - Convert a number to a string and use string concatenation (string + variable). </p> <p><pre><code>number = 42\nnumber_str = str(number)\nprint(\"Number as string:\" + number_str)\n</code></pre> If we had to print the variable <code>number</code> instead of <code>number_str</code>, we would have got a TypeError telling us that we can only concatenate str (not \"int\") to str. Try it out.</p> <p> </p>  <p> </p> <p>Exercise 2.6.1 - Write a Python program that prompts the user to input their year of birth. Convert this input into an integer and store it in the same variable. Finally, print the message 'I was born in year xxxx', where 'xxxx' represents the year of birth entered. <p><sup>You can refer to Output topic  if you need help with the <code>print()</code> function.</sup></p>  <p><sub>Exercise 2.6.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"02.Variables-and-input/2.7-Variables-and-input-quiz/","title":"2.7 Variables and input quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"03.Output/3.1-Print-function/","title":"3.1 Print function","text":""},{"location":"03.Output/3.1-Print-function/#31a-print-function-hello-world","title":"3.1a Print function - \"Hello World\" <p>The aim of this program is to print \"Hello World\" on the output of the screen. To do this, we can use the <code>print()</code> function. The <code>print()</code> function is a predefined function in Python that prints the specified message as the output.</p> <p>  </p> <p>To print anything, we just need to pass that in the <code>print()</code> function in double quotes.</p> <p>Example 3.1.1</p> <p><pre><code>print(\"Hello World\")\n</code></pre> Example 3.1.1 - Output</p>  <pre>\nHello World\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"03.Output/3.1-Print-function/#31b-print-function-with-variables","title":"3.1b Print function with variables","text":""},{"location":"03.Output/3.1-Print-function/#31b1-comma-separated-arguments-approach","title":"3.1b.1 Comma-separated arguments approach","text":"<p>You can pass multiple arguments to the print function, separated by commas. Each argument can be a variable or a string.</p> <p>Example 3.1.2 - Comma-separated arguments approach, basic example</p> <p><pre><code>name = \"Thea\"\nage = 14\nprint(\"Name:\", name, \"Age:\", age)\n</code></pre> Example 3.1.2 - Output</p> <pre>\nName: Thea Age: 14\n</pre> <p> </p> <p>Example 3.1.3 - Comma-separated arguments approach to print multiple data types</p> <pre><code>pi = 3.14159\nis_holiday = True\nprint(\"Value of pi:\", pi, \"Is it a holiday?\", is_holiday)\n</code></pre> <p>Example 3.1.3 - Output</p> <pre>\nValue of pi: 3.14159 Is it a holiday? True\n</pre> <p> </p> <p>The comma-separated arguments approach for the <code>print</code> function is a flexible and convenient way to output multiple items. Here are some key points and additional details about using this approach:</p> <ul> <li>Automatic space insertion - When you use commas to separate multiple arguments in the print function, Python automatically inserts a space between each argument in the output.</li> <li>Multiple data types - You can print multiple variables of different data types without needing to explicitly convert them to strings.</li> <li>End parameter - The <code>print</code> function has an <code>end</code> parameter that defines what should be printed at the end of the output. More info in topic 3.3</li> <li>Separator Parameter - The <code>print</code> function also has a <code>sep</code> parameter that specifies the separator between the arguments. More info in topic 3.3</li> </ul> <p> </p>"},{"location":"03.Output/3.1-Print-function/#31b2-string-concatenation-approach","title":"3.1.b.2 String concatenation approach","text":"<p>You can concatenate strings using the <code>+</code> operator. Note that you need to convert non-string variables to strings using the <code>str()</code> function. This approach is explained in further detail in topic 3.4.</p> <p>Example 3.1.3</p> <p><pre><code>name = \"Thea\"\nage = 14\nprint(\"Name: \" + name + \" Age: \" + str(age))\n</code></pre> Example 3.1.3 - Output</p> <pre>\nName: Thea Age: 14\n</pre> <p> </p> <p>Note</p> <p>There are several other ways to use the <code>print()</code> function. However the f-strings approach have become the preferred choice due to their simplicity, efficiency, and enhanced readability. This will be explained in topic 3.5.</p> <p> </p> <p> </p> <p>Exercise 3.1.1 - Using the comma-separated arguments approach, write a Python program that does the following: <ul> <li> Stores the name of the country where you were born in a variable called <code>birth_country</code>.</li> <li> Prints the statement <code>Hello</code> followed by the value of the <code>birth_country</code> variable.</li> </ul> <p><sub>Exercise 3.1.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"03.Output/3.2-Print-an-empty-line/","title":"3.2 Print an empty line","text":"<p>To print an empty line just use the <code>print()</code> function without any parameters.</p> <p>Example 3.2.1</p> <pre><code>print()\n</code></pre> <p> </p> <p> </p> <p>Exercise 3.2.1 - Now write a Python program to output 5 empty lines. <p><sup>Redo this exercise with loops, once you are ready from Topic 6.</sup></p> <p><sub>Exercise 3.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"03.Output/3.3-Print-with-formatted-output/","title":"3.3 Print with formatted output","text":""},{"location":"03.Output/3.3-Print-with-formatted-output/#33a-print-with-new-line-character","title":"3.3a Print with new line character <p>The newline character in Python is a special character that helps us to format the output statements and it is represented as <code>\\n</code>.</p> <p>Example 3.3.1 - This example uses <code>\\n</code> to print the data to the new line.</p> <pre><code>print(\"This is the first line \\n and this is the second line.\")\n</code></pre> <p>Example 3.3.1 - Output</p>  <pre>\nThis is the first line \nand this is the second line.\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"03.Output/3.3-Print-with-formatted-output/#33b-print-with-end-parameter","title":"3.3b Print with <code>end</code> parameter <p>To print without a newline in Python 3, you can use the end parameter of the <code>print()</code> function.</p> <p>This is an optional parameter in order to specify what to print at the end of each line. By default if we do not pass the end parameter, it is <code>\\n</code>, which is a new line as we saw in 3.3.1. As we can see in Example 3.3.2, we are passing a blank space ' ' to the <code>end</code> parameter and that is the reason why the second line is next to the first line with just an extra space.</p> <p>Example 3.3.2 - This example uses <code>end</code> parameter.</p> <pre><code>print(\"First string.\", end=' ')\nprint(\"Second string.\")\n</code></pre> <p>Example 3.3.2 - Output</p>  <pre>\nFirst string. Second string.\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"03.Output/3.3-Print-with-formatted-output/#33c-print-with-sep-parameter","title":"3.3c Print with <code>sep</code> parameter <p>The print function also has a sep parameter that specifies the separator between the arguments. The default separator is a space ' '.</p> <p>Example 3.3.3 - This example uses <code>sep</code> parameter.</p> <pre><code>print(\"Hello\", \"world\", sep=\"-\")\n</code></pre> <p>Example 3.3.3 - Output</p>  <pre>\nHello-world\n</pre>  <p> </p>  <p> </p> <p>Exercise 3.3.1 - Write a program to output your name and surname on two separate lines. You can use the new line character approach as explained in 3.3a or the end parameter as explained in 3.3b to achieve your results.  <p><sub>Exercise 3.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"03.Output/3.4-Print-concatenated-strings/","title":"3.4 Print concatenated strings","text":"<p>In Python, you can concatenate strings using several methods. Each method has its own use case, but for simple string concatenation, using the <code>+</code> operator or formatted string literals (f-strings) are typically the most straightforward and readable. In the next section we will also explain how to use <code>print()</code> with F-strings which is the preferred way to format strings in Python 3.6+.</p> <p>Syntax:</p> <p>Here's a summary of the basic syntax for using the <code>+</code> operator to concatenate strings. <pre><code># Basic concatenation\nnew_string = string1 + string2\n\n# With additional characters\nnew_string = string1 + \" \" + string2\n\n# Multiple strings\nnew_string = string1 + \" \" + string2 + \" \" + string3\n</code></pre></p> <p> </p> <p>Example 3.4.1 - Basic concatenation example to demonstrate the usage of <code>+</code> operator with strings.</p> <pre><code>print(\"Now I know how to concatenate \" + \"strings.\")\n</code></pre> <p>Example 3.4.1 - Output </p> <pre>\nNow I know how to concatenate strings.\n</pre> <p> </p> <p>Example 3.4.2 - Concatenation example with variables. <pre><code>str1 = \"Hello\"\nstr2 = \"World\"\nresult = str1 + \" \" + str2\nprint(result)\n</code></pre></p> <p>Example 3.4.2 - Output</p> <pre>\nHello World\n</pre> <p>Example 3.4.2 - Explanation</p> <ol> <li> <p>Here, two variables <code>str1</code> and <code>str2</code> are assigned the string values <code>\"Hello\"</code> and <code>\"World\"</code>, respectively.</p> </li> <li> <p>The <code>+</code> operator is used to concatenate (combine) the strings.</p> <ul> <li>First, <code>str1 + \" \"</code> is evaluated. This concatenates the string <code>\"Hello\"</code> with a single space character <code>\" \"</code>, resulting in the intermediate string <code>\"Hello \"</code>.</li> <li>Then, <code>\"Hello \" + str2</code> is evaluated. This concatenates the intermediate string <code>\"Hello \"</code> with <code>str2</code> (which is <code>\"World\"</code>), resulting in the final string <code>\"Hello World\"</code>.</li> </ul> </li> <li> <p>The resulting concatenated string <code>\"Hello World\"</code> is assigned to the variable <code>result</code>.</p> </li> <li> <p>The <code>print</code> function outputs the value of result to the console, which is <code>\"Hello World\"</code>.</p> </li> </ol> <p> </p> <p>Example 3.4.3 - Concatenating multiple strings.  You can concatenate multiple strings by chaining the <code>+</code> operator: <pre><code># Define multiple strings\nstring1 = \"Hello\"\nstring2 = \"beautiful\"\nstring3 = \"World\"\n\n# Concatenate all strings with spaces in between\nresult = string1 + \" \" + string2 + \" \" + string3\n\n# Print the result\nprint(result)\n</code></pre></p> <p>Example 3.4.3 - Output</p> <pre>\nHello beautiful World\n</pre> <p>Example 3.4.3 - Explanation</p> <p>This is very similar to Example 3.4.2 but we're just chaining the <code>+</code> operator to add more strings in one final string.</p> <p> </p> <p>In summary, the <code>+</code> operator takes two strings and combines them into a new string. If you concatenate multiple strings, you can chain the <code>+</code> operator to add each part sequentially. This method is straightforward and readable for simple concatenation tasks.</p> <p> </p> <p> </p> <p>Exercise 3.4.1 - Create a Python program that asks the user for their first name and their favorite color. Then, use the <code>+</code> operator to concatenate these two pieces of information into a sentence and print the sentence. The sentence should be in the format: <pre>\n\"[First name]'s favorite color is [color].\"\n</pre> <p> </p> <p><sub>Exercise 3.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>"},{"location":"03.Output/3.5-Print-with-f-strings/","title":"3.5 Print with f strings","text":"<p>F-strings, or formatted string literals, are a feature introduced in Python 3.6 that provide a way to embed expressions inside string literals, using curly braces <code>{}</code>. The primary advantages of using f-strings are readability, performance, and ease of use.</p> <p>Syntax:</p> <p>The basic syntax for an f-string is to prefix the string with an <code>f</code> or <code>F</code> and include expressions inside curly braces <code>{}</code>.</p> <p><pre><code>name = \"Jake\"\nf_string = f\"Hello, {name}!\"\n</code></pre> </p> <p> </p>"},{"location":"03.Output/3.5-Print-with-f-strings/#35a-embedding-expressions","title":"3.5a Embedding Expressions <p>F-strings allow you to directly embed expressions within strings, making it easy to include variable values, the results of function calls, or even inline calculations.</p> <p>Example 3.5.1 - Embed expressions within string <pre><code>name = \"Jake\"\nage = 14\nmessage = f\"Name: {name}, Age: {age}\"\nprint(message) \n</code></pre> Example 3.5.1 - Output</p>  <pre>\nName: Jake, Age: 14\n</pre>  <p> </p> <p>Example 3.5.2 - Embed expressions within string in the <code>print()</code> function</p> <p><pre><code>greeting_string = \"Hello\"\nperson_name = \"Jamie\"\nprint(f\"String: {greeting_string} dear {person_name}\") \n</code></pre> Example 3.5.2 - Output</p>  <pre>\nHello dear Jamie\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"03.Output/3.5-Print-with-f-strings/#35b-formatting-numbers","title":"3.5b Formatting Numbers: <p>You can format numbers directly within the string.</p> <p>Example 3.5.3 - F-strings with formatting numbers</p> <pre><code>myfloat = 1.23456789\nprint(f\"Float with 3 decimal places: {myfloat:.3f}\")\n</code></pre> <p>Example 3.5.3 - Output</p>  <pre>\nFloat with 3 decimal places: 1.235\n</pre>  <p> </p> <p>Example 3.5.4 - More f-strings examples with formatting numbers</p> <pre><code>PI = 3.14159\nformatted_pi = f\"Pi is approximately {PI:.2f}\"\nprint(formatted_pi)\n</code></pre> <p>Example 3.5.4 - Output</p>  <pre>\nPi is approximately 3.14\n</pre>  <p>The above expression <code>{PI:.2f}</code>inside an f-string is used to format the floating-point number pi to two decimal places. Here's a breakdown of what each part means:</p> <ul> <li>PI - This is the variable whose value you want to format. (note that we're using uppercase letters for constant variable here)</li> <li>: - This introduces the format specification.</li> <li>.2f - This is the format specification itself, which has two components:</li> <li>. - Indicates that you want to format the number to a specific number of decimal places.</li> <li>2 - Specifies that the number should be formatted to two decimal places.</li> <li>f - Stands for \"fixed-point number,\" meaning that the number will be presented as a floating-point number.</li> </ul> <p> </p>  <p> </p>","text":""},{"location":"03.Output/3.5-Print-with-f-strings/#35c-additional-formatting-options","title":"3.5c Additional formatting options <p>You can adjust the formatting in various ways. Here is another example.</p> <p>Example 3.5.5 - In this example, <code>{PI:10.3f}</code> would format <code>PI</code> to 3.142 but with a minimum width of 10 characters, padded with space.</p> <p><code>python PI = 3.14159 formatted_pi = f\"Pi is approximately {PI:10.3f}\" print(formatted_pi)</code></p> <p>Example 3.5.5 - Output</p>  <pre>\nPi is approximately\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.142\n</pre>  <p>Example 3.5.5 - Explanation</p> <ul> <li>Three decimal places: {PI:.3f} would format PI to 3.142.</li> <li>No decimal places: {PI:.0f} would format PI to 3.</li> <li>Width and alignment: You can also specify a minimum width and alignment as displayed in this example. </li> </ul> <p> </p>  <p> </p> <p>F-strings can also be used to format date and time objects and they are often more readable than other string formatting methods. F-strings are generally faster than other string formatting methods because they are evaluated at runtime and do not involve function calls. Hence you should opt for f-strings formatting when possible.</p> <p> </p>  <p> </p> <p>Exercise 3.5.1 - Write a Python program that asks for the user's name and age. Print a greeting message that says:  <pre>\n\"Hello, [name]! You are [age] years old.\"\n</pre>   <p><sub>Exercise 3.5.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p> <p> </p>  <p> </p> <p>Exercise 3.5.2 - Write another Python program to ask the user to input two numbers. Then print the sum, difference, product, and quotient of these two numbers using f-strings. Finally format the output to show only 2 decimal places for the quotient.  <p><sub>Exercise 3.5.2 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"03.Output/3.6-Output-quiz/","title":"3.6 Output quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/","title":"4.1 Arithmetic operators","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#41a-what-are-arithmetic-operators","title":"4.1a What are arithmetic operators? <p>Arithmetic operators are symbols in programming languages (like Python) that perform mathematical operations on numbers. They are used to carry out basic math functions like adding, subtracting, multiplying, and dividing. Think of them like the buttons on a calculator that help you do math!</p> <p> </p> <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#41b-why-do-we-need-arithmetic-operators","title":"4.1b Why do we need arithmetic operators? <p>Arithmetic operators are essential in programming for several reasons:</p> <ul> <li> <p>Performing Calculations - They allow you to do mathematical calculations, which are necessary for many tasks, such as calculating totals, averages, and other important values.</p> </li> <li> <p>Building Logic - Many programming tasks involve comparing numbers, checking conditions, and making decisions based on calculations. Arithmetic operators help build the logic needed for these tasks.</p> </li> <li> <p>Manipulating Data - They enable you to manipulate data, like changing the value of variables, creating new values from existing ones, and transforming data into different formats.</p> </li> <li> <p>Solving Problems - Whether you\u2019re coding a game, a scientific application, or a simple program, solving problems often involves arithmetic. For example, figuring out how much money you have left after buying something, or calculating how many pixels to move a character in a game.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#41c-main-arithmetic-operators","title":"4.1c Main arithmetic operators. <p>The main arithmetic operators that we will use in this course are:</p>      = equals   + addition   - subtraction   * multiplication       / division   // floor division   % modulus   ** power of","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#equals","title":"<code>=</code> Equals <p>This is called the assignment operator. It is used to assign a value to a variable.</p> <p>Example 4.1.1 <pre><code>x = 5 \n</code></pre></p>  <pre>\n# It means the variable x now holds the value 5.\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#addition","title":"<code>+</code> Addition <p>This operator adds two numbers together.</p> <p>Example 4.1.2 <pre><code>3 + 2\n</code></pre></p> <p>Example 4.1.2 - Output</p>  <pre>\n5\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#-subtraction","title":"<code>-</code> Subtraction <p>This operator subtracts one number from another.</p> <p>Example 4.1.3</p> <pre><code>5 - 3\n</code></pre> <p>Example 4.1.3 - Output</p>  <pre>\n2\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#multiplication","title":"<code>*</code> Multiplication <p>This operator multiplies two numbers together.</p> <p>Example 4.1.4</p> <pre><code>Example: 4 * 2\n</code></pre> <p>Example 4.1.4 - Output</p>  <pre>\n8\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#division","title":"<code>/</code> Division <p>This operator divides one number by another.</p> <p>Example 4.1.5 <pre><code>10 / 2\n</code></pre></p> <p>Example 4.1.5 - Output</p>  <pre>\n5.0\n</pre>  <p>Note that the result is a decimal (even if it\u2019s a whole number).</p> <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#floor-division","title":"<code>//</code> Floor Division <p>This operator divides one number by another and then rounds down to the nearest whole number.</p> <p>Example 4.1.6 <pre><code>10 // 3\n</code></pre> Example 4.1.6 - Output</p>  <pre>\n3\n</pre>  <p>(because 10 divided by 3 is 3.333..., and floor division rounds it down to 3).</p> <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#modulus","title":"<code>%</code> Modulus <p>This operator gives the remainder when one number is divided by another.</p> <p>Example 4.1.7 <pre><code>10 % 3 \n</code></pre></p> <p>Example 4.1.7 - Output</p>  <pre>\n1\n</pre>  <p>(because 10 divided by 3 is 3 with a remainder of 1).</p> <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#power-of","title":"<code>**</code> Power of <p>This operator raises one number to the power of another number.</p> <p>Example 4.1.8 <pre><code>2 ** 3\n</code></pre> Example 4.1.8 - Output</p>  <pre>\n8\n# because 2 raised to the power of 3 means:\n# 2 x 2 x 2, which is 8.\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#41d-interpret-a-program-snippet-that-includes-arithmetic-operations","title":"4.1d Interpret a program snippet that includes arithmetic operations. <p>Example 4.1.9 - The subtraction operator (<code>-</code>) is used to find out how many apples are left after eating some. This is a simple way to see how arithmetic operators help us solve everyday problems through programming! <pre><code># Let's say you have 10 apples and you eat 3\n\napples = 10\neaten = 3\n\nremaining_apples = apples - eaten  # Subtract the eaten apples from the total\n\nprint(\"Remaining apples:\", remaining_apples)\n</code></pre></p> <p>Example 4.1.9 - Output</p>  <pre>\nRemaining apples: 7\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.1-Arithmetic-operators/#41e-develop-a-program-using-arithmetic-operations","title":"4.1e Develop a program using arithmetic operations. <p>Exercise 4.1.1 - Create a Python program that calculates the total cost of a shopping trip. <p>Let's say that you went to the store and bought the following items:</p> <ul> <li>3 candy bars at \u20ac1.50 each</li> <li>2 bags of chips at \u20ac2.75 each</li> <li>4 sodas at \u20ac1.25 each</li> <li>You have a \u20ac20 note to pay for these items.</li> </ul> <p>Your program should:</p> <ul> <li> Calculate the total cost of all the items.</li> <li> Calculate how much money you will have left after paying with the \u20ac20 note.</li> <li> Calculate how many items you bought in total.</li> <li> Print out the total cost, the remaining money, and the total number of items.</li> </ul>  <p><sub>Exercise 4.1.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/","title":"4.2 Assignment operators","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#42a-what-are-assignment-operators","title":"4.2a What are assignment operators? <p>Assignment operators in Python are used to change the value of a variable. They combine a basic math operation (like addition or multiplication) with assigning a new value to the variable. They make your code shorter and easier to read.</p> <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#42b-why-use-these-assignment-operators","title":"4.2b Why use these assignment operators? <ul> <li>Convenience - They make your code shorter and easier to write.</li> <li>Readability - They make it clear that you are updating the value of a variable.</li> </ul>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#42c-main-assignment-operators","title":"4.2c Main assignment operators <p>The main assignment operators that we will use in this course are:</p>      += x=x+3   -= x=x-3   *= x=x*3       /= x=x/3   //= x=x//3   %= x=x%3      <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#add-and-assign","title":"<code>+=</code> (Add and Assign) <p>This operator adds a number to the current value of a variable and then assigns the new value to that variable.</p> <p>Example 4.2.1 <pre><code>x = 5\nx += 3  # This is the same as x = x + 3\nprint(x)\n</code></pre> Example 4.2.1 - Output</p>  <pre>\n8\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#-subtract-and-assign","title":"<code>-=</code> (Subtract and Assign) <p>This operator subtracts a number from the current value of a variable and then assigns the new value to that variable.</p> <p>Example 4.2.2 <pre><code>x = 5\nx -= 2  # This is the same as x = x - 2\nprint(x)\n</code></pre></p> <p>Example 4.2.2 - Output</p>  <pre>\n3\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#multiply-and-assign","title":"<code>*=</code> (Multiply and Assign) <p>This operator multiplies the current value of a variable by a number and then assigns the new value to that variable.</p> <p>Example 4.2.3 <pre><code>x = 5\nx *= 4  # This is the same as x = x * 4\nprint(x)\n</code></pre></p> <p>Example 4.2.3 - Output</p>  <pre>\n20\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#divide-and-assign","title":"<code>/=</code> (Divide and Assign) <p>This operator divides the current value of a variable by a number and then assigns the new value to that variable.</p> <p>Example 4.2.4 <pre><code>x = 10\nx /= 2  # This is the same as x = x / 2\nprint(x) \n</code></pre></p> <p>Example 4.2.4 - Output</p>  <pre>\n5.0\n# Note the decimal\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#floor-divide-and-assign","title":"<code>//=</code> (Floor Divide and Assign) <p>This operator divides the current value of a variable by a number, rounds down to the nearest whole number, and then assigns the new value to that variable.</p> <p>Example 4.2.5 <pre><code>x = 10\nx //= 3  # This is the same as x = x // 3\nprint(x)\n</code></pre></p> <p>Example 4.2.5 - Output</p>  <pre>\n3\n</pre>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#modulus-and-assign","title":"<code>%=</code> (Modulus and Assign) <p>This operator calculates the remainder when the current value of a variable is divided by a number and then assigns the new value (the remainder) to that variable.</p> <p>Example 4.2.6 <pre><code>x = 10\nx %= 3  # This is the same as x = x % 3\nprint(x)\n</code></pre></p> <p>Example 4.2.6 - Output</p>  <pre>\n1\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#42d-interpret-a-program-snippet-that-includes-assignment-operators","title":"4.2d Interpret a program snippet that includes assignment operators. <p>Example 4.2.7 - In this example, you can see how each assignment operator changes the value of x step by step. </p> <pre><code>x = 10  # Start with x equal to 10\n\nx += 5  # Add 5 to x, now x is 15\nx -= 3  # Subtract 3 from x, now x is 12\nx *= 2  # Multiply x by 2, now x is 24\nx /= 4  # Divide x by 4, now x is 6.0\nx //= 2  # Floor divide x by 2, now x is 3\nx %= 2  # Get the remainder of x divided by 2, now x is 1\n\nprint(x)\n</code></pre> <p>Example 4.2.7 - Output</p>  <pre>\n1.0\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.2-Assignment-operators/#42e-develop-a-program-using-assignment-operators","title":"4.2e Develop a program using assignment operators. <p>Exercise 4.2.1 - Write a Python program that starts with a variable score set to 100. Perform the following operations on score using assignment operators and print the result after each operation: <ul> <li>Decrease score by 15 using <code>-=</code>.</li> <li>Increase score by 20 using <code>+=</code>.</li> <li>Multiply score by 3 using <code>*=</code>.</li> <li>Divide score by 2 using <code>/=</code>.</li> <li>Floor divide score by 5 using <code>//=</code>.</li> <li>Take the remainder of score divided by 4 using <code>%=</code>.</li> </ul>  <p><sub>Exercise 4.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"04.Arithmetic-and-assignment-operations/4.3-Arithmetic-and-assignment-quiz/","title":"4.3 Arithmetic and assignment quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"05.Decisions/5.1-Decision-statements/","title":"5.1 Decision statements","text":""},{"location":"05.Decisions/5.1-Decision-statements/#51a-what-are-python-decision-statements","title":"5.1a What are Python decision statements <p>Decision statements in Python allow a program to execute certain pieces of code based on specific conditions. The primary decision statements are <code>if</code>, <code>elif</code>, and <code>else</code>.</p> <p>  </p> <ul> <li> <p>if statement: This statement checks a condition. If the condition is true, the code block inside the if statement is executed.</p> </li> <li> <p>elif statement: This stands for \"else if\" and provides additional conditions to check if the initial if condition is false. You can have multiple elif statements to check multiple conditions.</p> </li> <li> <p>else statement: This statement is executed if none of the previous conditions (<code>if</code> or <code>elif</code>) are true.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.1-Decision-statements/#51b-why-do-we-use-decision-statements","title":"5.1b Why do we use decision statements? <p>Decision statements are essential for controlling the flow of a program. They allow programs to make decisions and execute specific code blocks based on different conditions, enabling more complex and dynamic behavior.- </p> <p>Here\u2019s a simple example to demonstrate how <code>if</code>, <code>elif</code>, and <code>else</code> statements work in Python:</p> <p>Example 5.1.1  - Example of decision statements</p> <p><pre><code>age = 14\n\nif age &lt; 13:\n    print(\"You are a child.\")\nelif age &gt;= 13 and age &lt; 20:\n    print(\"You are a teenager.\")\nelse:\n    print(\"You are an adult.\")\n</code></pre> Example 5.1.1 - Output</p>  <pre>\nYou are a teenager.\n</pre>  <p>Example 5.1.1 - Explanation</p> <ul> <li> <p><code>if age &lt; 13:</code> - This checks if the value of age is less than 13. If true, it prints \"You are a child.\".</p> </li> <li> <p><code>elif age &gt;= 13</code> and <code>age &lt; 20</code> - If the if condition is false, this checks if the value of age is between 13 and 19 (inclusive). If true, it prints \"You are a teenager.\".</p> </li> <li> <p><code>else</code> - If neither the <code>if</code> nor the <code>elif</code> conditions are true, this block is executed, printing <code>\"You are an adult.\"</code>.</p> </li> </ul> <p> </p>  <p>Note</p> <p>As you can see decision statements like <code>if</code>, <code>elif</code>, and <code>else</code> are crucial for writing programs that can react to different inputs and conditions, making them flexible and interactive.</p>","text":""},{"location":"05.Decisions/5.2-Conditional-operators/","title":"5.2 Conditional operators","text":""},{"location":"05.Decisions/5.2-Conditional-operators/#52a-what-are-python-conditional-operators","title":"5.2a What are Python conditional operators? <p>Conditional operators in Python are used to compare values. These comparisons return a Boolean value (True or False). Here are the primary conditional operators:</p>  ==equal to !=not equal to &gt;greater than &lt;less than &gt;=greater than or equal to &lt;=less than or equal to  <p> </p> <p><code>==</code> (equal to) - Checks if two values are equal.</p> <p>Example 5.2.1 <p><pre><code>5 == 5 \n</code></pre> Example 5.2.1 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p><code>!=</code> (not equal to) - Checks if two values are not equal.</p> <p>Example 5.2.2</p> <p><pre><code>5 != 3\n</code></pre> Example 5.2.2 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p><code>&gt;</code>(greater than) -  Checks if the value on the left is greater than the value on the right.</p> <p>Example 5.2.3</p> <pre><code>5 &gt; 3 \n</code></pre> <p>Example 5.2.3 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p><code>&lt;</code> (less than) - Checks if the value on the left is less than the value on the right.</p> <p>Example 5.2.4 <pre><code>3 &lt; 5\n</code></pre></p> <p>Example 5.2.4 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p><code>&gt;=</code> (greater than or equal to) - Checks if the value on the left is greater than or equal to the value on the right.</p> <p>Example 5.2.5 <pre><code>Example: 5 &gt;= 5\n</code></pre></p> <p>Example 5.2.5 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p><code>&lt;=</code> (less than or equal to) - Checks if the value on the left is less than or equal to the value on the right.</p> <p>Example 5.2.6 <pre><code>Example: 3 &lt;= 5 \n</code></pre></p> <p>Example 5.2.6 - Output</p>  <pre>\nTrue\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.2-Conditional-operators/#52b-why-do-we-use-conditional-operators","title":"5.2b Why do we use conditional operators? <p>Conditional operators are essential for decision-making in programs. They allow you to compare values and execute different code blocks based on the result of these comparisons. This enables more complex and dynamic behavior in your programs.</p> <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.2-Conditional-operators/#52c-interpret-a-program-snippet-that-includes-conditional-operators","title":"5.2c Interpret a program snippet that includes conditional operators <p>Here\u2019s a simple example to demonstrate how these conditional operators can be used in Python.</p> <p>Example 5.2.7 - Conditional operators</p> <pre><code>a = 10\nb = 20\n\n# Equal to\nif a == b:\n    print(\"a is equal to b\")\nelse:\n    print(\"a is not equal to b\")  # This will be printed\n\n# Not equal to\nif a != b:\n    print(\"a is not equal to b\")  # This will be printed\n\n# Greater than\nif a &gt; b:\n    print(\"a is greater than b\")\nelse:\n    print(\"a is not greater than b\")  # This will be printed\n\n# Less than\nif a &lt; b:\n    print(\"a is less than b\")  # This will be printed\n\n# Greater than or equal to\nif a &gt;= b:\n    print(\"a is greater than or equal to b\")\nelse:\n    print(\"a is not greater than or equal to b\")  # This will be printed\n\n# Less than or equal to\nif a &lt;= b:\n    print(\"a is less than or equal to b\")  # This will be printed\n</code></pre> <p>Example 5.2.7 - Explanation</p> <ul> <li><code>a == b:</code> - Checks if a is equal to b. Since 10 is not equal to 20, it prints \"a is not equal to b\".</li> <li><code>a != b:</code> - Checks if a is not equal to b. Since 10 is not equal to 20, it prints \"a is not equal to b\".</li> <li><code>a &gt; b:</code> - Checks if a is greater than b. Since 10 is not greater than 20, it prints \"a is not greater than b\".</li> <li><code>a &lt; b:</code> - Checks if a is less than b. Since 10 is less than 20, it prints \"a is less than b\".</li> <li><code>a &gt;= b:</code> - Checks if a is greater than or equal to b. Since 10 is not greater than or equal to 20, it prints \"a is not greater than or equal to b\".</li> <li><code>a &lt;= b:</code> - Checks if a is less than or equal to b. Since 10 is less than or equal to 20, it prints \"a is less than or equal to b\".</li> </ul> <p> </p> <p>As you can see, conditional operators are crucial for making decisions in programs. They allow you to compare values and take different actions based on the results of these comparisons, enabling more sophisticated and responsive behavior in your code.</p> <p> </p>  <p> </p> <p>Exercise 5.2.1 - Write a Python program that determines the price of a movie ticket based on the age of the person. Use <code>if</code>, <code>elif</code>, and <code>else</code> statements to implement the following rules: <ol> <li>If the person is less than 5 years old, the ticket is free.</li> <li>If the person is between 5 and 12 years old (inclusive), the ticket price is \u20ac5.</li> <li>If the person is between 13 and 17 years old (inclusive), the ticket price is \u20ac10.</li> <li>If the person is 18 years old or older, the ticket price is \u20ac15.</li> </ol> <p>The program should ask the user to input their age and then print out the appropriate ticket price and a message indicating the price category.</p>  <p><sub>Exercise 5.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"05.Decisions/5.3-Logical-operators/","title":"5.3 Logical operators","text":""},{"location":"05.Decisions/5.3-Logical-operators/#53a-what-are-logical-operators","title":"5.3a What are logical operators? <p>Logical operators in Python are used to combine conditional statements and produce Boolean values (<code>True</code> or <code>False</code>). They help in creating complex conditions. Here are the primary logical operators:</p> <p> </p>  and or not  <p> </p> <p>and - Returns True if both statements are true.</p>    Condition 1 Logical operator Condition 2 Returns     True and True True   True and False False   False and True False   False and False False    <p>Example 5.3.1 - Demonstrating the logical <code>and</code> operator. <pre><code>(5 &gt; 3) and (10 &gt; 5) \n</code></pre></p> <p>Example 5.3.1 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p>or  - Returns True if at least one of the statements is true.</p>    Condition 1 Logical operator Condition 2 Returns     True or True True   True or False True   False or True True   False or False False    <p>Example 5.3.2 - Demonstrating the logical <code>or</code> operator. <pre><code>(5 &gt; 3) or (10 &lt; 5) \n</code></pre></p> <p>Example 5.3.2 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <p>not  -  Reverses the result; returns True if the statement is false.</p>    Logical operator Condition Returns     not True False   not False True    <p>Example 5.3.3 - Demonstrating the logical <code>not</code> operator. <pre><code>not (5 &gt; 3)\n</code></pre></p> <p>Example 5.3.3 - Output</p>  <pre>\nFalse\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.3-Logical-operators/#53b-why-do-we-use-logical-operators","title":"5.3b Why do we use logical operators? <p>Logical operators are used to build more complex conditional statements that require multiple conditions to be evaluated. They are essential for creating more sophisticated decision-making structures in your programs.</p> <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.3-Logical-operators/#53c-interpret-a-program-snippet-that-includes-logical-operators","title":"5.3c Interpret a program snippet that includes logical operators <p>Example 5.3.4 - Here\u2019s a simple example to demonstrate how logical operators can be used in Python.</p> <pre><code>age = 16\nhas_ticket = True\n\n# Using 'and' to check if both conditions are true\nif age &gt;= 18 and has_ticket:\n    print(\"You can enter the movie.\")\nelse:\n    print(\"You cannot enter the movie.\")  # This will be printed\n\n# Using 'or' to check if at least one condition is true\nif age &gt;= 18 or has_ticket:\n    print(\"You can enter the movie.\")  # This will be printed\nelse:\n    print(\"You cannot enter the movie.\")\n\n# Using 'not' to reverse the condition\nif not has_ticket:\n    print(\"You need a ticket to enter.\")\nelse:\n    print(\"You have a ticket, you can enter.\")  # This will be printed\n</code></pre> <p>Example 5.3.4 - Output </p>  <pre>\nYou cannot enter the movie.\nYou can enter the movie.\nYou have a ticket, you can enter.\n</pre>  <p>Example 5.3.4 - Explanation</p> <ul> <li> <p><code>and:</code> </p> <ul> <li> <p>Condition: <code>age &gt;= 18 and has_ticket</code></p> </li> <li> <p>Explanation: Checks if both <code>age</code> is greater than or equal to 18 and <code>has_ticket</code> is <code>True</code>. Since <code>age</code> is 16, the condition is <code>False</code> and it prints \"You cannot enter the movie.\"</p> </li> </ul> </li> <li> <p><code>or:</code> </p> <ul> <li>Condition: <code>age &gt;= 18 or has_ticket</code></li> <li>Explanation: Checks if either <code>age</code> is greater than or equal to 18 or has <code>_ticket</code> is <code>True</code>. Since <code>has_ticket</code> is <code>True</code>, the condition is <code>True</code> and it prints \"You can enter the movie.\"</li> </ul> </li> <li> <p><code>not:</code></p> <ul> <li>Condition: <code>not has_ticket</code></li> <li>Explanation: Reverses the value of has <code>_ticket</code>. Since has <code>_ticket</code> is <code>True</code>, <code>not has_ticket</code> is <code>False</code> and it prints \"You have a ticket, you can enter.\"</li> </ul> </li> </ul> <p> </p>  <p> </p> <p>Exercise 5.3.1 - Write a Python program that determines if someone can drive based on their age and whether they have a driving license. Use <code>if</code>, <code>elif</code>, and <code>else</code> statements along with logical operators (<code>and</code>, <code>or</code>, <code>not</code>) to implement the following rules: <ul> <li>If the person is 18 years old or older and has a driving license, print \"You can drive.\"</li> <li>If the person is 18 years old or older or has a driving license, print \"You are either old enough or have a license to drive.\"</li> <li>If the person does not have a driving license, print \"You need a license to drive.\"</li> </ul> <p>The program should ask the user to input their age and whether they have a driving license (yes or no), then print out the appropriate message based on the inputs.</p>  <p><sub>Exercise 5.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"05.Decisions/5.4-Nested-decision-statements/","title":"5.4 Nested decision statements","text":""},{"location":"05.Decisions/5.4-Nested-decision-statements/#54a-what-are-nested-decision-statements","title":"5.4a What are nested decision statements? <p>Nested decision statements are <code>if</code>, <code>elif</code>, and <code>else</code> statements placed inside another <code>if</code>, <code>elif</code>, or <code>else</code> statement. This allows for more complex decision-making by evaluating multiple conditions in a hierarchical manner.</p> <p>Please refer to Section - 5.1 Decision statements if you need to revise the decision statements before you move on.</p> <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.4-Nested-decision-statements/#54b-why-do-we-use-decision-statements","title":"5.4b Why do we use decision statements? <p>We use nested decision statements to handle complex scenarios where a single condition depends on the outcome of another condition. They allow for more detailed and specific decision paths in our code. Here's a basic structure of nested decision statements:</p> <p>Syntax:</p> <pre><code>if condition1:\n    # Block of code executed if condition1 is true\n    if condition2:\n        # Block of code executed if both condition1 and condition2 are true\n    else:\n        # Block of code executed if condition1 is true but condition2 is false\nelse:\n    # Block of code executed if condition1 is false\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"05.Decisions/5.4-Nested-decision-statements/#54c-interpret-a-program-snippet-that-includes-nested-decision-statements","title":"5.4c Interpret a program snippet that includes nested decision statements. <p>Here\u2019s an example demonstrating nested decision statements in Python which determines the type of activity based on the weather and whether it's a weekday or weekend.</p> <p>Example 5.4.1</p> <pre><code># Example of nested decision statements\n# Determine activity based on weather and day of the week\n\nweather = \"cloudy\"  # Can be \"sunny\", \"rainy\", or \"cloudy\"\nday_of_week = \"weekend\"  # Can be \"weekday\" or \"weekend\"\n\nif weather == \"sunny\":\n    print(\"The weather is sunny.\")\n    if day_of_week == \"weekend\":\n        print(\"You can go to the park.\")\n    else:\n        print(\"You can go for a walk after school.\")\nelse:\n    if weather == \"rainy\":\n        print(\"The weather is rainy.\")\n        if day_of_week == \"weekend\":\n            print(\"You can watch a movie at home.\")\n        else:\n            print(\"You can read a book after school.\")\n    else:\n        print(\"The weather is cloudy.\")\n        if day_of_week == \"weekend\":\n            print(\"You can visit a museum.\")\n        else:\n            print(\"You can do homework after school.\")\n</code></pre> <p>Example 5.4.1 - Explanation</p> <ol> <li>First <code>if</code> statement (<code>if weather == \"sunny\":</code>)<ul> <li>Checks if the <code>weather</code> is \"sunny\".</li> <li>If <code>True</code>, it prints \"The weather is sunny.\" and checks the nested condition <code>if day_of_week == \"weekend\":</code>.</li> <li>If <code>day_of_week</code> is \"weekend\", it prints \"You can go to the park.\"   Otherwise, it prints \"You can go for a walk after school.\"</li> </ul> </li> <li>First <code>else</code> statement (<code>else:</code>)<ul> <li>If the <code>weather</code> is not \"sunny\", it enters the <code>else</code> block and checks for the next condition.</li> </ul> </li> <li>Nested <code>if</code> statement within the first <code>else</code> (<code>if weather == \"rainy\":</code>)<ul> <li>Checks if the <code>weather</code> is \"rainy\".</li> <li>If <code>True</code>, it prints \"The weather is rainy.\" and checks the nested condition <code>if day_of_week == \"weekend\":</code>.</li> <li>If <code>day_of_week</code> is \"weekend\", it prints \"You can watch a movie at home.\"</li> <li>Otherwise, it prints \"You can read a book after school.\"</li> </ul> </li> <li>Second <code>else</code> statement within the first <code>else</code> (<code>else:</code>)<ul> <li>If the <code>weather</code> is neither \"sunny\" nor \"rainy\", it assumes the weather is \"cloudy\".</li> <li>Prints \"The weather is cloudy.\" and checks the nested condition <code>if day_of_week == \"weekend\":</code>.</li> <li>If <code>day_of_week</code> is \"weekend\", it prints \"You can visit a museum.\"</li> <li>Otherwise, it prints \"You can do homework after school.\"</li> </ul> </li> </ol> <p> </p>  <p> </p> <p>Exercise 5.4.1 - Write a Python program that determines the type of discount a customer can receive based on their membership status and the amount they spend. Use nested if statements to implement the following rules: <ol> <li> <p>The program should have a predefined membership status which can be <code>\"none\"</code>, <code>\"silver\"</code>, or <code>\"gold\"</code>.</p> </li> <li> <p>The program should have a predefined amount spent by the customer. e.g. <code>amount_spent = 120</code></p> </li> <li> <p>If the customer has a <code>\"gold\"</code> membership:</p> <ul> <li>If the amount spent is \u20ac100 or more, print \"You get a 20% discount!\"</li> <li>Otherwise, print \"You get a 15% discount!\"</li> </ul> </li> <li> <p>If the customer has a <code>\"silver\"</code> membership:</p> <ul> <li>If the amount spent is \u20ac100 or more, print \"You get a 10% discount!\"</li> <li>Otherwise, print \"You get a 5% discount!\"</li> </ul> </li> <li> <p>If the customer has no membership (<code>\"none\"</code>):</p> <ul> <li>If the amount spent is \u20ac100 or more, print \"You get a 2% discount!\"</li> <li>Otherwise, print \"You get no discount.\"</li> </ul> </li> </ol>  <p><sub>Exercise 5.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"05.Decisions/5.5-Decisions-quiz/","title":"5.5 Decisions quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"06.Iterations/6.1-Iterations-loops/","title":"6.1 Iterations loops","text":""},{"location":"06.Iterations/6.1-Iterations-loops/#61a-what-are-python-loops","title":"6.1a What are Python loops? <p>Python loops are constructs that allow you to execute a block of code repeatedly, based on a condition or a sequence. They are fundamental to programming because they help you avoid redundant code, making your programs more efficient and easier to manage. </p> <p>  </p> <p>There are two main types of loops in Python: <code>for-in</code> loops and <code>while</code> loops. As we will see in section 6.4, the <code>while</code> loop can also be paired with an <code>else</code> block.</p>","text":""},{"location":"06.Iterations/6.1-Iterations-loops/#61b-why-do-we-need-loops","title":"6.1b Why do we need loops? <ul> <li> <p>Repetition - Loops allow you to repeat a block of code multiple times without having to write it out repeatedly.</p> <ul> <li>Example: Printing numbers 1 to 100 without writing 100 print statements.</li> </ul> </li> <li> <p>Efficiency - Loops make your code more efficient and easier to read and maintain.</p> <ul> <li>Example: Iterating through a list of items to perform the same operation on each item.</li> </ul> </li> <li> <p>Automation  - Automate repetitive tasks.</p> <ul> <li>Example: Processing each file in a directory, or fetching data from a list of URLs.</li> </ul> </li> <li> <p>Dynamic Code Execution - Loops can handle dynamic inputs and data structures that may vary in size.</p> <ul> <li>Example: Processing user input until they decide to quit.</li> </ul> </li> </ul> <p> </p>  <p> </p>  <p>Note</p> <p>Loops are a fundamental part of Python programming that allow you to execute a block of code multiple times efficiently. They help manage repetitive tasks, handle dynamic data, and keep your code clean and maintainable.</p>","text":""},{"location":"06.Iterations/6.2-For-in-loop/","title":"6.2 For in loop","text":""},{"location":"06.Iterations/6.2-For-in-loop/#62a-why-do-we-use-the-for-in-loop","title":"6.2a  Why do we use the <code>for-in</code> loop? <p>The <code>for-in</code> loop is used for iterating over a sequence (such as a list, tuple, dictionary, set, or string) or other iterable objects.</p> <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.2-For-in-loop/#62b-how-do-we-use-the-for-in-loop","title":"6.2b How do we use the <code>for-in</code> loop? <p>Syntax: <pre><code>for element in iterable:\n    # code block to execute\n</code></pre></p> <p><code>for-in</code> loop components:</p> <ol> <li> <p><code>for</code> - This keyword begins the for loop. It tells Python that you are starting a loop that will iterate over elements in an iterable.</p> </li> <li> <p><code>element</code> - This is a variable that will take on the value of each item in the iterable, one at a time, during each iteration of the loop. You can name this variable anything you like, but it should be meaningful and descriptive.</p> </li> <li> <p><code>in</code> - This keyword specifies that you are iterating over the elements of the iterable.</p> </li> <li> <p><code>iterable</code> - This can be any Python object capable of returning its elements one at a time, such as a list, tuple, string, dictionary, set, or range. The for loop will iterate over each element of this iterable.</p> </li> <li> <p>colon (<code>:</code>) - This signifies the start of the code block that will be executed for each element in the iterable.</p> </li> <li> <p><code>code block to execute</code> - This is the indented block of code that will be executed for each element in the iterable. The code block can consist of one or more statements.</p> </li> </ol> <p>Example 6.2.1</p> <p>Please note that function <code>range(5)</code> generates a sequence of numbers starting from 0 up to, but not including, 5. So, <code>range(5)</code> produces the sequence [0, 1, 2, 3, 4].</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <p>Example 6.2.1 - Output</p>  <pre>\n0\n1\n2\n3\n4\n</pre>  <p>Example 6.2.1 - Output Visualisation or visualize this code here.</p>    Iteration <code>i</code> value <code>print(i)</code> output     1 0 0   2 1 1   3 2 2   4 3 3   5 4 4    <p>Example 6.2.1 - Explanation</p> <ul> <li> <p>The <code>for-in</code> loop iterates over each value generated by <code>range(5)</code>, which are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code>.</p> </li> <li> <p>During each iteration, the value of <code>i</code> is printed using <code>print(i)</code>.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.2-For-in-loop/#62c-why-do-we-use-range-with-for-loop","title":"6.2c Why do we use <code>range()</code> with <code>for</code> loop? <ul> <li> <p>Iteration Control - <code>range()</code> allows you to control how many times the loop will iterate or what values it will iterate over.</p> </li> <li> <p>Sequence Generation - It generates a sequence of integers, making it useful for performing a task a specific number of times or iterating over a fixed range of values.</p> </li> <li> <p>Efficiency - <code>range()</code> is memory efficient as it generates values on-the-fly rather than storing them all in memory.</p> </li> </ul> <p>Example 6.2.2 - Use case example with range function to iterate a fixed number of times. This loop will iterate 10 times, printing \"Hello, iteration 0\" through \"Hello, iteration 9\".</p> <pre><code>for i in range(10):\n    print(f\"Hello, iteration {i}\")\n</code></pre> <p>Example 6.2.2 - Output</p>  <pre>\nHello, iteration 0\nHello, iteration 1\nHello, iteration 2\nHello, iteration 3\nHello, iteration 4\nHello, iteration 5\nHello, iteration 6\nHello, iteration 7\nHello, iteration 8\nHello, iteration 9\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.2-For-in-loop/#62d-how-the-for-in-loop-works-with-a-list","title":"6.2d How the <code>for-in</code> loop works with a list? <p>Syntax: <pre><code>for element in list_name:\n    # Code to execute for each element\n</code></pre></p> <p>Here\u2019s a breakdown of the components:</p> <ul> <li><code>for</code>: This keyword initiates the loop.</li> <li><code>element</code>: A variable name that will hold each value from the list as the loop iterates. You can choose any name for this variable.</li> <li><code>in</code>: This keyword is used to specify that we are iterating over the elements of the list.</li> <li><code>list_name</code>: The name of the list you want to iterate over.</li> </ul> <p> </p> <p>Example 6.2.3 This example illustrates the basic usage of the <code>for-in</code> loop with a list.</p> <pre><code>numbers = [5, 10, 15, 20, 25]\nfor number in numbers:\n    print(number)\n</code></pre> <p>Example 6.2.3 - Output</p>  <pre>\n5\n10\n15\n20\n25\n</pre>  <p>Example 6.2.3 - Output Visualisation or visualise this code here.</p>    Iteration <code>number</code> value <code>print(number)</code> output     1 5 5   2 10 10   3 15 15   4 20 20   5 25 25    <p>Example 6.2.3 - Explanation</p> <ol> <li> <p>Initialization:</p> <ul> <li>The <code>for</code> loop starts with the first element of the list, <code>5</code>, and assigns it to the variable <code>number</code>.</li> </ul> </li> <li> <p>Iteration:</p> <ul> <li>The loop executes the <code>print(number)</code> statement, outputting <code>5</code>.</li> <li>The loop then moves to the next element of the list, <code>10</code>, assigns it to <code>number</code>, and repeats the process.</li> <li>This continues until all elements in the list have been processed.</li> </ul> </li> <li> <p>Completion:</p> <ul> <li>After the loop has processed the last element (<code>25</code>), it terminates, and the program continues with any code that follows the loop.</li> </ul> </li> </ol> <p> </p> <p>Example 6.2.4 - This example access indices in a list with the help of the <code>range()</code> function. This loop iterates over indices of <code>my_list</code>, printing each item and its index.</p> <pre><code>my_list = ['apple', 'banana', 'cherry']\nfor i in range(len(my_list)):\n    print(f\"Index {i}: {my_list[i]}\")\n</code></pre> <p>Example 6.2.4 - Output</p>  <pre>\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n</pre>  <p> </p>  <p> </p> <p>Exercise 6.2.1 - You are given a list of numbers. Write a Python program using a for loop that does the following: <ol> <li>Iterates over each number in the list.</li> <li>Prints each number.</li> <li>Calculates the sum of all the numbers in the list and prints it at the end. Here is the list of numbers: </li> </ol> <p><code>numbers = [10, 20, 30, 40, 50]</code></p>  <p><sub>Exercise 6.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"06.Iterations/6.3-While-loop/","title":"6.3 While loop","text":"<p>The <code>while</code> loop in Python is used to repeatedly execute a block of code as long as a specified condition is true. This means that the loop will continue to run until the condition evaluates to <code>False</code>. </p> <p>Syntax:</p> <p>The basic syntax of a <code>while</code> loop is: <pre><code>while condition:\n    # Code to execute\n</code></pre></p> <ul> <li> <p>condition - This is a boolean expression that is evaluated before each iteration of the loop. If the condition is True, the loop body is executed. If the condition is False, the loop terminates, and the program continues with the next statement after the loop.</p> </li> <li> <p>loop body - The block of code that you want to repeat. This block must be indented to indicate that it is part of the loop.</p> </li> </ul> <p> </p> <p>Example 6.3.1 - Let\u2019s look at a simple example where we count from 1 to 5 using a while loop. <pre><code>count = 1  # Initialize the counter variable\n\nwhile count &lt;= 5:  # Condition to continue the loop\n    print(count)  # Print the current value of the counter\n    count += 1  # Increment the counter by 1\n</code></pre></p> <p>Example 6.3.1 - Explanation <ol> <li>Initialization - The counter variable <code>count</code> is initialized to <code>1</code>.</li> <li>Condition - The loop condition is <code>count &lt;= 5</code>. As long as <code>count</code> is less than or equal to <code>5</code>, the loop will continue to run.</li> <li>Loop Body - Inside the loop, the current value of <code>count</code> is printed, and then <code>count</code> is incremented by <code>1</code> using <code>count += 1</code>.</li> </ol> <p> </p> <p>Example 6.3.2 - This will print numbers from 0 to 4, similar to the output that we saw in 6.2. <code>for-in</code> [loop example].</p> <pre><code>i = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</code></pre> <p>Example 6.3.2 - Output</p> <pre>\n0\n1\n2\n3\n4\n</pre> <p> </p> <p>Example 6.3.3 - Another example using a while loop to sum up numbers.</p> <pre><code>total = 0\nnumber = 1\nwhile number &lt;= 10:\n    total += number\n    number += 1\nprint(total)\n</code></pre> <p>Example 6.3.3 - Output</p> <pre>\n55\n</pre> <p> </p> <p>Example 6.3.4 - In this example we shall calculate the sum of all even numbers from 1 to a positive integer entered by the user. The program is using a while loop to iterate through the numbers and determine the sum. Finally, the program will print the sum of the even numbers.</p> <p><pre><code># Ask the user to enter a positive integer\nnumber = int(input(\"Enter a positive integer: \"))\n\n# Initialize a counter variable\ncount = 1\n\n# Initialize a variable to hold the sum of even numbers\nsum_of_evens = 0\n\n# Use a while loop to iterate through numbers from 1 to the entered number\nwhile count &lt;= number:\n    # Check if the current number is even\n    if count % 2 == 0:\n        # Add the even number to the sum\n        sum_of_evens += count\n    # Increment the counter variable\n    count += 1\n\n# Print the sum of even numbers\nprint(f\"The sum of all even numbers from 1 to {number} is {sum_of_evens}.\")\n</code></pre> Example 6.3.4 - Output</p> <p>If the user enters 10, the program should output:</p> <pre>\nThe sum of all even numbers from 1 to 10 is 30.\n</pre> <p>Example 6.3.4 - Explanation</p> <ol> <li> <p>Input - The user is prompted to enter a positive integer, which is stored in the variable <code>number</code>.</p> </li> <li> <p>Initialization - Two variables are initialized:</p> <ul> <li><code>count</code> is set to 1 to start counting from the first number.</li> <li><code>sum_of_evens</code> is set to 0 to accumulate the sum of even numbers.</li> </ul> </li> <li> <p>While loop</p> <ul> <li>The loop runs as long as <code>count</code>is less than or equal to <code>number</code>.</li> <li>Within the loop, the code checks if <code>count</code> is even using the modulus operator (<code>count % 2 == 0</code>). If it is even, it adds <code>count</code> to <code>sum_of_evens</code>.</li> <li>The counter <code>count</code> is incremented by 1 after each iteration.</li> </ul> </li> <li> <p>Output - After the loop completes, the program prints the sum of all even numbers from 1 to the entered number.</p> </li> </ol> <p> </p> <p> </p> <p>Exercise 6.3.1 - Write a Python program that asks the user to enter a positive integer and then prints out all the numbers from 1 up to and including that number. Use a while loop to accomplish this. <p><sub>Exercise 6.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer.</sub></p>"},{"location":"06.Iterations/6.4-While-else-loop/","title":"6.4 While else loop","text":""},{"location":"06.Iterations/6.4-While-else-loop/#64a-while-loop-paired-with-else-block","title":"6.4a While loop paired with else block <p>In Python, a <code>while</code> loop can be paired with an <code>else</code> block. The <code>else</code> block is executed when the <code>while</code> loop condition becomes false. However, if the loop is terminated by a <code>break</code> statement, the <code>else</code> block will not be executed. This feature can be useful for certain scenarios where you want to perform some action only if the loop wasn't terminated prematurely.</p> <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.4-While-else-loop/#64b-when-to-use-while-else","title":"6.4b When to use while-else <ul> <li> <p>Searching with a Condition - When you are searching for an item or a condition within a loop, and you need to handle the case where the item or condition is not found.</p> </li> <li> <p>Completion Without Interruption - When you need to ensure that a block of code runs only if the loop completes normally, without interruption by break.</p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.4-While-else-loop/#64c-how-to-use-while-loop-with-else-block","title":"6.4c How to use while loop with else block <p>Syntax: <pre><code>while condition:\n    # Code to execute while the condition is true\nelse:\n    # Code to execute when the condition becomes false (and not terminated by break)\n</code></pre> </p> <p>Example 6.4.1 - Consider a scenario where you are searching for an item in a list. If the item is found, you exit the loop early using break. If the loop completes without finding the item, you execute the else block.</p> <pre><code>items = [1, 2, 3, 4, 5]\nsearch_item = 3\n\nindex = 0\nwhile index &lt; len(items):\n    if items[index] == search_item:\n        print(f\"Item {search_item} found at index {index}\")\n        break\n    index += 1\nelse:\n    print(f\"Item {search_item} not found in the list\")\n</code></pre> <p>Example 6.4.1 - Output</p>  <pre>\nItem 3 found at index 2\n</pre>  <p>Example 6.4.1 - Explanation</p> <ol> <li>If <code>search_item</code> is found in the list, the loop will terminate with <code>break</code>, and the <code>else</code> block will not be executed.</li> <li>If <code>search_item</code> is not found in the list, the <code>else</code> block will be executed, indicating that the item was not found.</li> </ol> <p> </p>  <p> </p> <p>Exercise 6.4.1 - Write a Python program that asks the user to enter a positive number. If the user enters a negative number, the program should keep asking the user to enter a positive number. Once the user enters a positive number, print \"Thank you!\" and exit the loop. Use a while loop paired with an else block to accomplish this.  <p><sub>Exercise 6.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"06.Iterations/6.5-Nested-iterations/","title":"6.5 Nested iterations","text":"<p>Nested iterations in Python refer to having one loop inside another loop. This technique is commonly used when you need to perform repeated actions on a multi-dimensional structure, such as a list of lists (2D lists) or when you need to compare all elements of one sequence with all elements of another sequence.</p>"},{"location":"06.Iterations/6.5-Nested-iterations/#65a-why-do-we-need-nested-iterations","title":"6.5a Why Do We Need Nested Iterations? <ul> <li> <p>Handling Multi-dimensional Data Structures - Nested loops are essential for iterating through multi-dimensional data structures like matrices or grids. For example, if you have a 2D list (a list of lists), you use nested loops to access each element.</p> </li> <li> <p>Complex Algorithms - Some algorithms inherently require nested loops. Examples include sorting algorithms like bubble sort, insertion sort, or selection sort, which involve comparing each element with others.</p> </li> <li> <p>Cross-Product Operations - When you need to compute the Cartesian product of two sets or lists, nested loops allow you to generate all possible pairs of elements.</p> </li> <li> <p>Combinations and Permutations - Generating combinations or permutations of a set of elements typically involves nested loops.</p> </li> </ul> <p> </p> <p>Example 6.5.1 - Iterating through a 2D list</p> <p>Here's a simple example of nested iterations to print each element of a 2D list.</p> <pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nfor row in matrix:\n    for element in row:\n        print(element, end=' ')\n    print()  # Print a new line after each row\n</code></pre> <p>Example 6.5.1 - Output</p>  <pre>\n1 2 3 \n4 5 6 \n7 8 9\n</pre>  <p> </p> <p>Example 6.5.2 -  Generating Cartesian Product</p> <p>Here's an example of generating all pairs from two lists using nested loops.</p> <pre><code>list1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\nfor item1 in list1:\n    for item2 in list2:\n        print(f\"({item1}, {item2})\")\n</code></pre> <p>Example 6.5.2 - Output</p>  <pre>\n(1, a)\n(1, b)\n(1, c)\n(2, a)\n(2, b)\n(2, c)\n(3, a)\n(3, b)\n(3, c)\n</pre>  <p> </p> <p>Example 6.5.3 - Creating a Multiplication Table Here's another example to generate a multiplication table using nested loops.</p> <pre><code>for i in range(1, 6):\n    for j in range(1, 6):\n        print(f\"{i * j:2}\", end=' ')\n    print()  # Print a new line after each row\n</code></pre> <p> </p> <p>Example 6.5.3 - Output</p>  <pre>\n 1  2  3  4  5 \n 2  4  6  8 10 \n 3  6  9 12 15 \n 4  8 12 16 20 \n 5 10 15 20 25\n</pre>  <p> </p> <p>Example 6.5.3 - Explanation</p> <ol> <li> <p>Outer Loop (<code>for i in range(1, 6):</code>)</p> <ul> <li>This loop iterates through the numbers 1 to 5. The variable <code>i</code> represents the current row in the multiplication     table.</li> <li><code>range(1, 6)</code> generates the sequence [1, 2, 3, 4, 5]. The outer loop runs 5 times, once for each number in this range.</li> </ul> </li> <li> <p>Inner Loop (<code>for j in range(1, 6):</code>)</p> <ul> <li>Inside the outer loop, there's another loop that iterates through the numbers 1 to 5. The variable <code>j</code> represents the current column in the multiplication table.</li> <li><code>range(1, 6)</code> generates the sequence [1, 2, 3, 4, 5]. The inner loop also runs 5 times for each number in this range.</li> </ul> </li> <li> <p>Multiplication and Printing (<code>print(f\"{i * j:2}\", end=' ')</code>)</p> <ul> <li>Inside the inner loop, <code>i * j</code> calculates the product of the current row number (<code>i</code>) and the current column number (<code>j</code>).</li> <li>The <code>print</code> function is used to display this product. The format string <code>f\"{i * j:2}\"</code> ensures that the output is at least 2 characters wide, which helps to align the numbers neatly in columns.</li> <li><code>end=' '</code> specifies that the output should end with a space instead of a newline, so the numbers are printed on the same line.</li> </ul> </li> <li> <p>New Line (<code>print()</code>)</p> <ul> <li>After the inner loop completes (i.e., after all columns for the current row are printed), <code>print()</code> is called without any arguments to print a newline character. This moves the cursor to the next line, preparing for the next row of the multiplication table.</li> </ul> </li> </ol> <p>This results in a complete multiplication table for numbers 1 through 5, neatly formatted in rows and columns.</p> <p> </p> <p>Example 6.5.3 - Visualisation or visualize this code here.</p> <ul> <li>First iteration of the outer loop (<code>i = 1</code>):<ul> <li>Inner loop runs with <code>j</code> taking values 1 through 5:<ul> <li>1 * 1 = 1</li> <li>1 * 2 = 2</li> <li>1 * 3 = 3</li> <li>1 * 4 = 4</li> <li>1 * 5 = 5</li> </ul> </li> <li>Prints: <code>1 2 3 4 5</code> and then a newline.</li> </ul> </li> </ul> <p> </p> <ul> <li>Second iteration of the outer loop (<code>i = 2</code>):<ul> <li>Inner loop runs with <code>j</code> taking values 1 through 5:<ul> <li>2 * 1 = 2</li> <li>2 * 2 = 4</li> <li>2 * 3 = 6</li> <li>2 * 4 = 8</li> <li>2 * 5 = 10</li> </ul> </li> <li>Prints: <code>2 4 6 8 10</code> and then a newline.</li> </ul> </li> </ul> <p> </p> <ul> <li>Third iteration of the outer loop (<code>i = 3</code>):<ul> <li>Inner loop runs with <code>j</code> taking values 1 through 5:<ul> <li>3 * 1 = 3</li> <li>3 * 2 = 6</li> <li>3 * 3 = 9</li> <li>3 * 4 = 12</li> <li>3 * 5 = 15</li> </ul> </li> <li>Prints: <code>3 6 9 12 15</code> and then a newline.</li> </ul> </li> </ul> <p> </p> <ul> <li>Fourth iteration of the outer loop (<code>i = 4</code>):<ul> <li>Inner loop runs with <code>j</code> taking values 1 through 5:<ul> <li>4 * 1 = 4</li> <li>4 * 2 = 8</li> <li>4 * 3 = 12</li> <li>4 * 4 = 16</li> <li>4 * 5 = 20</li> </ul> </li> <li>Prints: <code>4 8 12 16 20</code> and then a newline.</li> </ul> </li> </ul> <p> </p> <ul> <li>Fifth iteration of the outer loop (<code>i = 5</code>):<ul> <li>Inner loop runs with <code>j</code> taking values 1 through 5:<ul> <li>5 * 1 = 5</li> <li>5 * 2 = 10</li> <li>5 * 3 = 15</li> <li>5 * 4 = 20</li> <li>5 * 5 = 25</li> </ul> </li> <li>Prints: <code>5 10 15 20 25</code> and then a newline.</li> </ul> </li> </ul> <p> </p>  <p> </p> <p>By using nested iterations appropriately, you can solve complex problems that involve multi-dimensional data and perform operations that require comparing or combining elements from different sequences. </p> <p>Remember that nested loops can significantly increase the complexity of your code and can lead to performance issues if not used carefully. The time complexity of nested loops is typically higher, often resulting in O(n^2), O(n^3), etc., depending on the level of nesting.</p>  <p>Note</p> <p>Ensure that nested loops are necessary for your problem. Sometimes, there might be more efficient algorithms that can achieve the same result with a lower time complexity.</p>  <p> </p>  <p> </p> <p>Exercise 6.5.1 - Write a Python program to generate a pattern of stars in the shape of a right-angled triangle. The program should ask the user for the number of rows and then print the triangle pattern using nested loops. <p>For 5 rows, the output should be:</p>  <pre>\n*\n**\n***\n****\n*****\n</pre>   <p><sub>Exercise 6.5.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"06.Iterations/6.6-Loop-control-statements/","title":"6.6 Loop control statements","text":"<p>Loop control statements in Python - <code>break</code>, <code>continue</code>, and <code>pass</code> allow us to control the flow of loops (<code>for-in</code> and <code>while</code> loops).</p> <p> </p>"},{"location":"06.Iterations/6.6-Loop-control-statements/#66a-break-statement","title":"6.6a <code>break</code> statement <p>The <code>break</code> statement terminates the loop entirely. When break is encountered inside a loop, the loop stops immediately, and the program continues with the next statement following the loop.</p> <p>Example 6.6.1 - In this example, the loop will print numbers from 0 to 4. When <code>i</code> is 5, the <code>break</code> statement is executed, and the loop terminates.</p> <pre><code>for i in range(10):\n    if i == 5:\n        break\n    print(i)\n</code></pre> <p>Example 6.6.1 - Output</p>  <pre>\n0\n1\n2\n3\n4\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.6-Loop-control-statements/#66b-continue-statement","title":"6.6b <code>continue</code> statement <p>The <code>continue</code> statement skips the rest of the code inside the loop for the current iteration and moves to the next iteration of the loop.</p> <p>Example 6.6.2 - In this example, the loop will print only the odd numbers from <code>0</code> to <code>9</code>. When <code>i</code> is an even number, the <code>continue</code> statement is executed, and the rest of the code inside the loop is skipped for that iteration.</p> <pre><code>for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre> <p>Example 6.6.2 - Output</p>  <pre>\n1\n3\n5\n7\n9\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.6-Loop-control-statements/#66c-pass-statement","title":"6.6c <code>pass</code> statement <p>The <code>pass</code> statement is a null operation; nothing happens when it is executed. It\u2019s used as a placeholder for future code. This can be useful in places where your code requires a statement syntactically, but you haven\u2019t decided what to do there yet.</p> <p>Example 6.6.3 - In this example, the pass statement is used as a placeholder within the if block. It doesn\u2019t affect the loop\u2019s execution.</p> <pre><code>for i in range(10):\n    if i % 2 == 0:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n</code></pre> <p>Example 6.6.3 - Output</p>  <pre>\n1\n3\n5\n7\n9\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"06.Iterations/6.6-Loop-control-statements/#66d-summary-of-loop-control-statements","title":"6.6d Summary of loop control statements <ul> <li><code>break</code> - Exits the loop immediately.</li> <li><code>continue</code> - Skips the rest of the code inside the loop for the current iteration and proceeds to the next iteration.</li> <li><code>pass</code> - Does nothing; it's a placeholder that allows you to write syntactically correct empty code.</li> </ul>","text":""},{"location":"06.Iterations/6.7-Iterations-quiz/","title":"6.7 Iterations quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/","title":"7.1 Distinguish between functions and modules","text":"<p>Function refers to the isolation of a part of the program\u2019s functionality and make it reusable.</p> <p>Module refers to the collection of functions in one file which can be used in various projects.</p> <p> </p>"},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/#71a-full-definition-of-a-python-function","title":"7.1a Full definition of a Python function <p>A Python function is a block of reusable code designed to perform a specific task. Functions are defined using the <code>def</code> keyword, followed by the function name, parentheses (which can enclose parameters), and a colon. The indented block of code following the colon is the function body.</p> <p>Syntax: <pre><code>def function_name(parameters):\n    # Function body\n    # Perform some actions\n    return result  # (optional)\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/#71b-why-use-functions","title":"7.1b Why use functions? <ul> <li>Code Reusability - Functions allow you to reuse code without rewriting it multiple times.</li> <li>Modularity - Functions break down complex problems into smaller, manageable parts.</li> <li>Readability - Functions improve the readability and organization of code.</li> <li>Maintainability - Functions make code easier to maintain and update.</li> </ul> <p>Example 7.1.1 -  Python function</p> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(2, 3)  # result will be 5\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/#71c-full-definition-of-a-python-module","title":"7.1c Full definition of a Python module <p>A Python module is a file containing Python definitions and statements. Modules are used to organize code into manageable sections. They can define functions, classes, and variables, and they can also include runnable code. Modules are saved with a .py extension.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/#71d-why-use-modules","title":"7.1d Why use modules? <ul> <li>Code Organization - Modules help to organize related code into a single file.</li> <li>Namespace Management - Modules prevent naming conflicts by encapsulating code in a separate namespace.</li> <li>Reusability - Modules can be imported and used in different programs, promoting code reuse.</li> <li>Maintainability - Modules make it easier to maintain and update code, as changes in a module affect all scripts that import it.</li> </ul> <p>Example 7.1.2 - Python module</p> <p>Suppose we have a file named mymodule.py</p> <pre><code># mymodule.py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n</code></pre> <p>You can import and use this module in another script. Please refer to section 7.5 - Import modules to find out more ways how to import modules.  <pre><code>import mymodule\n\nresult_add = mymodule.add(5, 3)  # result_add will be 8\nresult_subtract = mymodule.subtract(5, 3)  # result_subtract will be 2\n</code></pre> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.1-Distinguish-between-functions-and-modules/#71e-distinguishing-between-functions-and-modules","title":"7.1e Distinguishing between functions and modules <ul> <li> <p>Scope and Purpose:</p> <ul> <li> <p>Functions:</p> <ul> <li>A function is a single piece of code designed to perform a specific task.</li> <li>Functions are defined within a script or module.</li> <li>They can take parameters and return results.</li> <li>Functions are called or invoked to execute.</li> </ul> </li> <li> <p>Modules:</p> <ul> <li>A module is a file containing Python code (which can include multiple functions, classes, and variables).</li> <li>Modules are used to organize and encapsulate related code.</li> <li>They are imported into other scripts to use the code they contain.</li> <li>Modules can contain executable statements as well as definitions.</li> </ul> </li> </ul> </li> <li> <p>Use Cases:</p> <ul> <li>Function Use Case -  You need to repeatedly perform a specific task, such as calculating the sum of two numbers.</li> <li>Module Use Case - You have a collection of related functions and classes, such as a set of mathematical operations, and you want to organize them in a single file for reuse.</li> </ul> </li> </ul> <p> </p> <p>Example 7.1.3 - To illustrate the difference between functions and modules.</p> <pre><code># module_example.py (a module)\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\n# another_script.py (a script using the module)\nimport module_example\n\nresult1 = module_example.add(10, 5)        # Using the add function from module_example\nresult2 = module_example.subtract(10, 5)   # Using the subtract function from module_example\n</code></pre> <p> </p>","text":""},{"location":"07.Functions-and-modules/7.2-Distinguish-between-built-in-functions-and-user-defined-functions/","title":"7.2 Distinguish between built in functions and user defined functions","text":"<p>Distinguishing between Python built-in functions and user-defined functions can be done by understanding their characteristics and origins. Here's a detailed explanation of each:</p>"},{"location":"07.Functions-and-modules/7.2-Distinguish-between-built-in-functions-and-user-defined-functions/#72a-python-built-in-functions","title":"7.2a Python Built-in Functions <ol> <li>Predefined - Built-in functions are pre-installed with Python and are available out-of-the-box.</li> <li>Part of Python Standard Library - They are part of Python's standard library and are universally available in any Python environment.</li> <li>Consistent Behavior - They have consistent behavior and are well-documented.</li> <li>No Need for Definition -  They do not require any user-defined code to be written; they can be used directly.</li> </ol> <p>Examples:</p> <ul> <li><code>print()</code> - Outputs text or other data to the console.</li> <li><code>len()</code> - Returns the length of an object.</li> <li><code>sum()</code> - Sums the items of an iterable.</li> <li><code>type()</code> - Returns the type of an object.</li> </ul> <p>Example 7.2.1 - with built-in functions. <pre><code># Using built-in functions\nprint(\"Hello, world!\")  # Output: Hello, world!\nlength = len([1, 2, 3, 4])  # length is 4\ntotal = sum([1, 2, 3, 4])  # total is 10\ndata_type = type(42)  # data_type is &lt;class 'int'&gt;\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.2-Distinguish-between-built-in-functions-and-user-defined-functions/#72b-user-defined-functions-characteristics","title":"7.2b User-defined functions characteristics <ol> <li>Custom Definitions -  User-defined functions are created by the programmer to perform specific tasks.</li> <li>Defined Using def Keyword -  They are defined using the def keyword followed by a function name and parentheses containing parameters.</li> <li>Scope Limited to the Script/Module -  They are available only within the script or module where they are defined unless explicitly imported elsewhere.</li> <li>Flexible -  They can be tailored to fit the specific needs of a program.</li> </ol> <p>Examples of user-defined function are any function you define to perform a particular task. More examples are available in section 7.3 where we will learn how to create user-defined functions.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.2-Distinguish-between-built-in-functions-and-user-defined-functions/#72c-summary-of-differences","title":"7.2c Summary of differences    Feature Built-in Functions User-defined Functions     Availability Predefined, always available Defined by the user   Location Part of the Python standard library Located in user scripts or modules   Customization Cannot be changed Fully customizable   Definition No need for user definition Defined using the def keyword   Examples print(), len(), sum(), type() Any function created by the user","text":""},{"location":"07.Functions-and-modules/7.2-Distinguish-between-built-in-functions-and-user-defined-functions/#72d-identifying-functions","title":"7.2d Identifying Functions <p>To determine if a function is built-in or user-defined:</p> <ul> <li>Check Documentation -  Built-in functions are documented in the Python Standard Library documentation.</li> <li>Source Code-  User-defined functions are present in your script or module, and their definitions start with the def keyword.</li> <li>Use the builtins Module: You can inspect the builtins module to see all built-in functions available in Python.</li> </ul>  <p>By understanding these characteristics and using these methods, you can easily distinguish between built-in and user-defined functions in Python.</p>","text":""},{"location":"07.Functions-and-modules/7.3-Create-user-defined-functions/","title":"7.3 Create user defined functions","text":""},{"location":"07.Functions-and-modules/7.3-Create-user-defined-functions/#73a-how-to-create-user-defined-functions","title":"7.3a How to create user-defined functions <p>Creating user-defined functions in Python is straightforward. Functions are defined using the <code>def</code> keyword, followed by the function name and parentheses containing any parameters. The body of the function contains the code to be executed, and the function can optionally return a value using the return statement.</p> <p>Here's a step-by-step guide on how to create and use user-defined functions.</p> <ol> <li> <p>Define the function - Use the <code>def</code> keyword, provide a name for your function, and specify any parameters in parentheses. Then, indent the body of the function.</p> </li> <li> <p>Add code to the function body - Write the code that you want to execute when the function is called.</p> </li> <li> <p>Return a value (optional) - Use the <code>return</code> statement to return a value from the function. If no return statement is provided, the function returns <code>None</code> by default.</p> </li> <li> <p>Call the function - Use the function name followed by parentheses to call the function and pass any required arguments.</p> </li> </ol> <p> </p>  <p> </p> <p>Example 7.3.1 - Basic function definition and usage</p> <pre><code># Define the function\ndef greet(name):\n    \"\"\"This function greets the person whose name is passed as an argument.\"\"\"\n    print(f\"Hello, {name}!\")\n\n# Call the function\ngreet(\"Keith\")\n</code></pre> <p>Example 7.3.1 - Output</p>  <pre>\nHello, Keith!\n</pre>  <p> </p> <p>Example 7.3.2 - Function with a return value</p> <pre><code># Define the function\ndef add(a, b):\n    \"\"\"This function returns the sum of two numbers.\"\"\"\n    return a + b\n\n# Call the function and store the result\nresult = add(3, 5)\n\n# Print the result\nprint(result)\n</code></pre> <p>Example 7.3.2 - Output</p>  <pre>\n8\n</pre>  <p> </p> <p>Example 7.3.3 - Function with default parameter values</p> <p><pre><code># Define the function\ndef greet(name, greeting=\"Hello\"):\n    \"\"\"This function greets the person with the specified greeting.\"\"\"\n    print(f\"{greeting}, {name}!\")\n\n# Call the function with both arguments\ngreet(\"Kim\", \"Hi\")\n\n# Call the function with only the name argument (default greeting will be used)\ngreet(\"Sue\")\n</code></pre> Example 7.3.3 - Output</p>  <pre>\nHi, Kim!\nHello, Sue!\n</pre>  <p> </p> <p>Example 7.3.4 -  Function with variable number of arguments</p> <pre><code># Define the function\ndef summarize(*args):\n    \"\"\"This function prints the sum of all arguments.\"\"\"\n    total = sum(args)\n    print(f\"The sum is: {total}\")\n\n# Call the function with a variable number of arguments\nsummarize(1, 2, 3)\nsummarize(10, 20, 30, 40)\n</code></pre> <p>Example 7.3.4 - Output</p>  <pre>\nThe sum is: 6\nThe sum is: 100\n</pre>  <p> </p> <p>Example 7.3.5 - Function with keyword arguments</p> <pre><code># Define the function\ndef describe_pet(pet_name, animal_type=\"dog\"):\n    \"\"\"This function prints a description of a pet.\"\"\"\n    print(f\"I have a {animal_type} named {pet_name}.\")\n\n# Call the function with keyword arguments\ndescribe_pet(pet_name=\"Willie\", animal_type=\"hamster\")\ndescribe_pet(pet_name=\"Bella\")\n</code></pre> <p>Example 7.3.5 - Output</p>  <pre>\nI have a hamster named Willie.\nI have a dog named Bella.\n</pre>  <p> </p> <p>These examples cover basic and advanced usages of functions in Python, including default parameters, variable-length arguments, and keyword arguments. You can define functions to encapsulate reusable code blocks, making your programs modular and easier to maintain.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.3-Create-user-defined-functions/#73b-using-return-in-functions","title":"7.3b Using <code>return</code> in functions <p>In Python, whether or not to use the <code>return</code> statement in a function depends on the purpose of the function and what you want to achieve with it. Use <code>return</code> when you need to send a value back to the caller for further use or when you want to exit the function based on a condition. Here's a detailed explanation of when and why to use <code>return</code>:</p> <p>1. To output a value - When you want your function to produce a result that can be used later in your code, you use the <code>return</code> statement to send that result back to the caller. This is useful when you need the function to calculate or fetch data that will be used elsewhere.</p> <p>Example 7.3.6 - To output a value</p> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>Example 7.3.6 - Output</p>  <pre>\n8\n</pre>  <p> </p> <p>2. To exit a function early - You can use <code>return</code> to exit a function before it reaches the end, typically based on some condition.</p> <p>Example 7.3.7 - To exit a function early <pre><code>def check_even(number):\n    if number % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n\nprint(check_even(4))\nprint(check_even(7))\n</code></pre></p> <p>Example 7.3.7 - Output</p>  <pre>\nEven\nOdd\n</pre>  <p> </p> <p>3. To return multiple values - Python allows functions to return multiple values as a tuple. This can be handy for functions that need to return more than one piece of information. [tuples will be tackled in Section 8]</p> <p>Example 7.3.8 - To return multiple values <pre><code>def get_min_max(numbers):\n    return min(numbers), max(numbers)\n\nmin_val, max_val = get_min_max([1, 2, 3, 4, 5])\nprint(min_val, max_val)\n</code></pre></p> <p>Example 7.3.8 - Output</p>  <pre>\n1 5\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.3-Create-user-defined-functions/#73c-when-return-is-not-used","title":"7.3c  When return is not used <p>Omit <code>return</code> (or use it without a value) when the function's primary purpose is to perform an action or cause a side effect, and no value needs to be passed back to the caller.</p> <p>1. Performing an action without needing a result - If the function's purpose is to perform an action (like printing a message, modifying a global variable, or updating an object) and you do not need to <code>return</code> any result, you can omit the return statement. By default, such functions return <code>None</code>.</p> <p>Example 7.3.9 <pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Jake\")\n</code></pre></p> <p>Example 7.3.9 - Output</p>  <pre>\nHello, Jake!\n</pre>  <p> </p> <p>2. Side effects -  Some functions are designed to cause side effects (like modifying a list or an object, writing to a file, etc.) rather than computing and returning a value.</p> <p>Example 7.3.10 <pre><code>def add_to_list(my_list, item):\n    my_list.append(item)\n\nmy_list = [1, 2, 3]\nadd_to_list(my_list, 4)\nprint(my_list)\n</code></pre></p> <p>Example 7.3.10 - Output</p>  <pre>\n[1, 2, 3, 4]\n</pre>  <p> </p>  <p> </p> <p>Exercise 7.3.1 - Write a Python function called <code>calculate_grade</code> that takes a single argument <code>score</code>, which is a number between 0 and 100. The function should return the letter grade based on the following scale: <ul> <li>A for scores 90 and above</li> <li>B for scores between 80 and 89</li> <li>C for scores between 70 and 79</li> <li>D for scores between 60 and 69</li> <li>F for scores below 60</li> </ul> <p>Additionally, write code to test this function with different scores and print the results.</p>  <p><sub>Exercise 7.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/","title":"7.4 String functions","text":"<p>String functions are essential in Python because they provide a way to manipulate and handle textual data efficiently. Strings are a core data type in Python, and these functions allow for various operations such as searching, modifying, and formatting text.</p> <p>Here's an explanation of common string features and string functions that are required for this course.</p>"},{"location":"07.Functions-and-modules/7.4-String-functions/#74a-string-indexing-stringposition-get-character-from-string","title":"7.4a String indexing (<code>string[position]</code>) - get character from string <p>This feature retrieves a single character from a string at a specified position (index).</p> <p>Explanation of string indexing: - String Indexing - allows you to retrieve a specific character from a string by specifying its position (index). <ul> <li> <p>Zero-Based Indexing - Python uses zero-based indexing, meaning the first character of a string is at index 0, the second character is at index 1, and so on.  <li> <p>Negative Indexing - Python also supports negative indexing, where <code>-1</code> refers to the last character, <code>-2</code> to the second last character, and so on.   <p>Example 7.4.1 - String indexing (positive indexing)</p> <pre><code>text = \"Hello\"\ncharacter = text[1]  # 'e'\n</code></pre> <p>Example 7.4.1 - Explanation</p> <p><code>text[1]</code> accesses the character at index 1 of the string <code>text</code>, which is <code>'e'</code>.</p> <p> </p> <p>Example 7.4.2 - String indexing (negative indexing)</p> <p><pre><code>text = \"Hello\"\nlast_character = text[-1]  # 'o'\nsecond_last_character = text[-2]  # 'l'\n</code></pre> Example 7.4.2 - Explanation</p> <ul> <li><code>text[-1]</code> retrieves the last character, <code>'o'</code>.</li> <li><code>text[-2]</code> retrieves the second last character, <code>'l'</code>.</li> </ul> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74b-substring-stringstartend","title":"7.4b Substring (<code>string[start:end]</code>) <p>This operation extracts a part of the string starting from the start index up to but not including the end index.</p> <p>Example 7.4.3 - with <code>start:end</code> indices</p> <p>This function extracts a part of the string, starting from the index 2 and up to (but not including) index 5.</p> <pre><code>text = \"The quick brown fox jumps over the lazy dog\"\nstart = 4\nend = 9\nsubstring = text[start:end]  # 'quick'\n</code></pre> <p>Example 7.4.3 - Explanation</p> <p><code>text[start:end]</code> slices the string from the index specified by <code>start</code> to the index before <code>end</code>. In this case, <code>start</code> is <code>4</code> and <code>end</code> is <code>9</code>, so the substring from index <code>4</code> to <code>8</code> is <code>'quick'</code>.</p> <p> </p> <p>Example 7.4.4 with negative indices</p> <p><pre><code>text = \"Learn Python\"\nsubstring = text[-6:]  # 'Python'\n</code></pre> Example 7.4.4 - Explanation</p> <p><code>text[-6:]</code> slices the string from the 6th last character to the end of the string, resulting in <code>'Python'</code>.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74c-string-function-strip","title":"7.4c String function - <code>strip()</code> <p>This function removes any leading (left) and trailing (right) whitespace characters from the string</p> <p>Example 7.4.5 <pre><code>text = \"  Hello  \"\nstripped_text = text.strip()  # 'Hello'\n</code></pre></p> <p>Example 7.4.5 - Explanation</p> <p><code>text.strip()</code> removes the spaces before and after the word 'Hello'.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74d-function-len","title":"7.4d Function - <code>len()</code> <p>This function returns the length of the string, i.e., the number of characters it contains. <code>len()</code> function in Python is not limited to strings; it works on various other data types as well. The <code>len()</code> function returns the number of items in an object, and it can be used with any object that has a length, such as sequences and collections.</p> <p>Example 7.4.6 <pre><code>text = \"Hello\"\nlength = len(text)  # 5\n</code></pre></p> <p>Example 7.4.6 - Explanation</p> <p><code>len(text)</code> returns <code>5</code>, as there are 5 characters in <code>'Hello'</code>.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74e-string-function-lower","title":"7.4e String function - <code>lower()</code> <p>This function converts all characters in the string to lowercase.</p> <p>Example 7.4.7 <pre><code>text = \"Hello\"\nlower_text = text.lower()  # 'hello'\n</code></pre></p> <p>Example 7.4.7 - Explanation</p> <p><code>text.lower()</code> changes <code>'Hello'</code> to <code>'hello'</code>.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74f-string-function-upper","title":"7.4f String function - <code>upper()</code> <p>This function converts all characters in the string to uppercase.</p> <p>Example 7.4.8 <pre><code>text = \"Hello\"\nupper_text = text.upper()  # 'HELLO'\n</code></pre></p> <p>Example 7.4.8 - Explanation</p> <p><code>text.upper()</code> changes <code>'Hello'</code> to <code>'HELLO'</code>.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74g-string-function-replace","title":"7.4g String function - <code>replace()</code> <p>This function replaces all occurrences of a specified substring with another substring.</p> <p>Example 7.4.9 <pre><code>text = \"Hello World\"\nnew_text = text.replace(\"World\", \"Python\")  # 'Hello Python'\n</code></pre> Example 7.4.9 - Explanation</p> <p><code>text.replace(\"World\", \"Python\")</code> changes <code>'World'</code> to <code>'Python'</code>.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74h-string-function-find","title":"7.4h String function - <code>find()</code> <p>This function searches the string for a specified substring and returns the position (index) of where it was found. If the substring is not found, it returns -1.</p> <p>Example 7.4.10 <pre><code>text = \"Hello World\"\nposition = text.find(\"World\")  # 6\n</code></pre></p> <p>Example 7.4.10 - Explanation</p> <p><code>text.find(\"World\")</code> returns <code>6</code>, the starting index of <code>'World'</code> in the string.</p> <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.4-String-functions/#74i-function-count","title":"7.4i Function - <code>count()</code> <p>This function returns the number of occurrences of a specified substring in the string. The <code>count()</code> function in Python is versatile and works with both strings and collections such as lists, tuples, and other iterable types.</p> <p>Example 7.4.11 <pre><code>text = \"Hello World\"\ncount = text.count(\"l\")  # 3\n</code></pre></p> <p>Example 7.4.11 - Explanation</p> <p><code>text.count(\"l\")</code> returns <code>3</code>, as <code>'l'</code> appears three times in <code>'Hello World'</code>.</p> <p> </p>  <p> </p> <p>These functions are fundamental tools in Python for processing and analyzing textual data, making it easier to work with strings in various applications.</p> <p> </p>  <p> </p> <p>Exercise 7.4.1 - Given the string <code>quote = \"The quick brown fox jumps over the lazy dog\"</code>, perform the following tasks: <ul> <li> Extract the character at the 5th position in the string.</li> <li> Get the substring from the 10th to the 15th character.</li> <li> Remove any leading and trailing spaces from the string.</li> <li> Find the length of the string.</li> <li> Convert the entire string to lowercase.</li> <li> Convert the entire string to uppercase.</li> <li> Replace the word \"lazy\" with \"energetic\".</li> <li> Find the position of the word \"fox\" in the string.</li> <li> Count how many times the letter \"o\" appears in the string.</li> </ul>  <p><sub>Exercise 7.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"07.Functions-and-modules/7.5-Import-modules/","title":"7.5 Import modules","text":"<p>There are several ways to import modules as we will explain in this topic. Please refer to section 7.1 - Distinguish between functions &amp; modules to revise what are Python modules and why do we use them.</p>"},{"location":"07.Functions-and-modules/7.5-Import-modules/#75a-import-modules-with-import","title":"7.5a Import modules with <code>import</code> <p>This statement imports the entire module. To use any function or class from the module, you must prefix it with the module name.</p> <p>Syntax: <pre><code>import module_name\n</code></pre></p> <p> </p> <p>Example 7.5.1 - import ; imports the entire module, requiring you to use the module name prefix (<code>random.</code>) to access functions. <pre><code>import random\n\n# Generate a random integer between 1 and 10\nrandom_integer = random.randint(1, 10)\nprint(f\"Random integer between 1 and 10: {random_integer}\")\n</code></pre></p> <p>Example 7.5.1 - Output</p>  <pre>\nRandom integer between 1 and 10: 3\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.5-Import-modules/#75b-import-modules-with-from-import","title":"7.5b Import modules with <code>from ... import</code> <p>This statement imports a specific function or class from the module. You can use the imported function or class directly without prefixing it with the module name.</p> <p>Syntax: <pre><code>from module_name import function_name\n</code></pre></p> <p> </p> <p>Example 7.5.2 - from ... import ; imports only the specific function <code>randint</code>, allowing you to use it directly without the module name prefix <pre><code>from random import randint\n\n# Generate a random integer between 1 and 10\nrandom_integer = randint(1, 10)\nprint(f\"Random integer between 1 and 10: {random_integer}\")\n</code></pre></p> <p>Example 7.5.2 - Output</p>  <pre>\nRandom integer between 1 and 10: 7\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.5-Import-modules/#75c-import-modules-with-from-import-as","title":"7.5c Import modules with <code>from ... import ... as</code> <p>This statement imports a specific function or class from the module and gives it a different name (alias). You can use the alias name to refer to the imported function or class.</p> <p>Syntax: <pre><code>from module_name import function_name as alias_name\n</code></pre></p> <p> </p> <p>Example 7.5.3 - from ... import ... as ; import the <code>randrange</code> function from the <code>random</code> module and alias it as <code>num_generator</code> <pre><code>from random import randrange as num_generator\n\n# Generate a random integer between 1 and 10\nrandom_integer = num_generator(1, 11)  # Note: randrange excludes the stop value\nprint(f\"Random integer between 1 and 10: {random_integer}\")\n</code></pre></p> <p>Example 7.5.3 - Output</p>  <pre>\nRandom integer between 1 and 10: 8\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.5-Import-modules/#75d-import-module-with-from-import","title":"7.5d Import module with <code>from ... import *</code> <p>The <code>from ... import *</code> statement imports all the functions, classes, and variables from the stated module directly into your current namespace. This means you can use them without prefixing them with the module name.</p> <p>Syntax: <pre><code>from module_name import *\n</code></pre></p> <p> </p> <p>Example 7.5.4 Using <code>from random import *</code> ; In this example, we'll use various functions from the <code>random</code> module without needing to prefix them with <code>random.</code>.</p> <pre><code>from random import *\n\n# Generate a random integer between 1 and 10\nrandom_integer = randint(1, 10)\nprint(f\"Random integer between 1 and 10: {random_integer}\")\n\n# Generate a random floating-point number between 0 and 1\nrandom_float = random()\nprint(f\"Random floating-point number between 0 and 1: {random_float}\")\n</code></pre> <p>Example 7.5.4 - Output</p>  <pre>\nRandom integer between 1 and 10: 1\nRandom floating-point number between 0 and 1: 0.6928575893172548\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.5-Import-modules/#75e-summary-of-how-you-can-import-modules-in-python","title":"7.5e Summary of how you can import modules in Python <ul> <li> <p><code>import module_name</code></p> <ul> <li>Imports the entire module.</li> <li>Use the module name to access functions/classes.</li> </ul> </li> <li> <p><code>from module_name import function_name</code></p> <ul> <li>Imports only the specified function or class.</li> <li>Use the function/class directly without the module name.</li> </ul> </li> <li> <p><code>from module_name import function_name as alias_name</code></p> <ul> <li>Imports the specified function or class and assigns it an alias.</li> <li>Use the alias name to refer to the function/class.</li> </ul> </li> <li> <p><code>from module_name import *</code></p> <ul> <li>Imports all functions, classes, and variables from the module directly into your namespace.</li> <li>Simplifies function calls by removing the need for the module prefix.</li> <li>Can lead to namespace conflicts and reduced code readability.</li> <li>In practice, it's generally better to import only the specific functions you need or use a prefix to avoid issues.</li> </ul> </li> </ul> <p> </p>  <p>Note</p> <p>Understanding these different import statements will help you write more readable and efficient Python code by only importing what you need and avoiding potential naming conflicts.</p>  <p> </p>","text":""},{"location":"07.Functions-and-modules/7.6-Functions-and-modules-quiz/","title":"7.6 Functions and modules quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"08.Data-structures/8.1-Built-in-data-structures/","title":"8.1 Built in data structures","text":"<p>Python provides several built-in data structures to help organize and manage data efficiently. Three commonly used data structures are lists, tuples, and dictionaries. Each serves different purposes and has distinct characteristics.</p> <p> </p>"},{"location":"08.Data-structures/8.1-Built-in-data-structures/#81a-why-use-different-data-structures","title":"8.1a Why use different data structures? <p>Different data structures are used to efficiently solve different problems. Here\u2019s why we use these specific data structures:</p> <ul> <li> <p>Lists are great for ordered collections where you need to access, add, remove, or change items dynamically. They are versatile and widely used.</p> </li> <li> <p>Tuples are useful when you need an immutable, ordered collection. They ensure that the data remains constant, which can prevent accidental modifications and can be used as dictionary keys.</p> </li> <li> <p>Dictionaries provide a way to map unique keys to values, offering quick lookups, additions, and updates. They are ideal for associative arrays, databases, or any situation where you need to connect unique identifiers to specific data points.</p> </li> </ul> <p>By understanding and using these different data structures appropriately, you can write more efficient, readable, and maintainable Python code.</p>","text":""},{"location":"08.Data-structures/8.2-Lists/","title":"8.2 Lists","text":""},{"location":"08.Data-structures/8.2-Lists/#82a-what-are-python-lists","title":"8.2a What are Python lists? <p>Python lists are a built-in data structure used to store an ordered collection of items. Lists are mutable, meaning their contents can be changed after creation. They can hold items of any data type, including integers, strings, and even other lists.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.2-Lists/#82b-why-do-we-use-lists","title":"8.2b Why do we use lists? <p>We use lists because they provide a flexible way to organize and manipulate data. Lists allow us to store a collection of items in a single variable, iterate over the items, and perform various operations like adding, removing, or sorting elements. This makes lists an essential tool for managing data in Python programs.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.2-Lists/#82c-how-do-we-use-lists","title":"8.2c How do we use lists? <p>Here are examples demonstrating the use of some common list functions:</p> <p>Example 8.2.1 - <code>append(item)</code> - Adds an item to the end of the list. <pre><code>fruits = ['apple', 'banana', 'cherry']\nfruits.append('date')\nprint(fruits)\n</code></pre></p> <p>Example 8.2.1 - Output</p>  <pre>\n['apple', 'banana', 'cherry', 'date']\n</pre>  <p> </p> <p>Example 8.2.2 - <code>clear()</code> - Removes all items from the list. <pre><code>fruits = ['apple', 'banana', 'cherry']\nfruits.clear()\nprint(fruits)\n</code></pre></p> <p>Example 8.2.2 - Output</p>  <pre>\n[]\n</pre>  <p> </p> <p>Example 8.2.3 - <code>count(item)</code> - Returns the number of occurrences of an item in the list. <pre><code>fruits = ['apple', 'banana', 'cherry', 'banana']\nbanana_count = fruits.count('banana')\nprint(banana_count)\n</code></pre></p> <p>Example 8.2.3 - Output</p>  <pre>\n2\n</pre>  <p> </p> <p>Example 8.2.4 - <code>insert(index, item)</code> - Inserts an item at a specified position in the list. <pre><code>fruits = ['apple', 'banana', 'cherry']\nfruits.insert(1, 'blueberry')\nprint(fruits)\n</code></pre></p> <p>Example 8.2.4 - Output</p>  <pre>\n['apple', 'blueberry', 'banana', 'cherry']\n</pre>  <p> </p> <p>Example 8.2.5 - <code>len()</code> - Returns the number of items in the list. <pre><code>fruits = ['apple', 'blueberry', 'banana', 'cherry']\nlength = len(fruits)\nprint(length)\n</code></pre></p> <p>Example 8.2.5 - Output</p>  <pre>\n4\n</pre>  <p> </p> <p>Example 8.2.6 - <code>pop([index])</code> - Removes and returns the item at the specified index. If no index is specified, it removes and returns the last item. <pre><code>fruits = ['apple', 'blueberry', 'banana', 'cherry']\nlast_fruit = fruits.pop()\nprint(last_fruit)\nprint(fruits)\n</code></pre></p> <p>Example 8.2.6 - Output</p>  <pre>\n'cherry'\n['apple', 'blueberry', 'banana']\n</pre>  <p> </p> <p>Example 8.2.7 - <code>remove(item)</code> - Removes the first occurrence of an item from the list. <pre><code>fruits = ['apple', 'blueberry', 'banana', 'cherry']\nfruits.remove('banana')\nprint(fruits)  # Output: ['apple', 'blueberry', 'cherry']\n</code></pre></p> <p>Example 8.2.7 - Output</p>  <pre>\n['apple', 'blueberry', 'cherry']\n</pre>  <p> </p> <p>Example 8.2.8 - <code>reverse()</code> - Reverses the order of the items in the list. <pre><code>fruits = ['apple', 'blueberry', 'banana', 'cherry']\nfruits.reverse()\nprint(fruits)\n</code></pre></p> <p>Example 8.2.8 - Output</p>  <pre>\n['cherry', 'banana' , blueberry', 'apple']\n</pre>  <p> </p> <p>Example 8.2.9 - <code>sort()</code> - Sorts the items of the list in ascending order by default. To sort in descending order, use <code>sort(reverse=True)</code>. <pre><code>numbers = [3, 1, 4, 1, 5, 9]\nnumbers.sort()\nprint(numbers)\n</code></pre></p> <p>Example 8.2.9 - Output</p>  <pre>\n[1, 1, 3, 4, 5, 9]\n</pre>  <p> </p>  <p> </p> <p>Python lists are versatile data structures that allow you to store and manipulate ordered collections of items. Using functions like <code>append()</code>, <code>clear()</code>, <code>count()</code>, <code>insert()</code>, <code>len()</code>, <code>pop()</code>, <code>remove()</code>, <code>reverse()</code>, and <code>sort()</code>, you can efficiently manage and process data within your programs. These capabilities make lists an indispensable part of Python programming.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.2-Lists/#82d-how-to-loop-through-a-list","title":"8.2d How to loop through a list <p>Looping through a list allows you to perform operations on each item in the list. Here are some common ways to loop through a list in Python:</p> <p>1. Using a <code>for</code> loop <p>Example 8.2.10 - The <code>for</code> loop is the most straightforward way to iterate over each item in a list.</p> <p><pre><code># List of favourite movies\nfavourite_movies = ['Inception', 'The Matrix', 'Interstellar', 'The Dark Knight', 'Pulp Fiction']\n\n# Loop through each movie in the list\nfor movie in favourite_movies:\n    print(movie)\n</code></pre> Example 8.2.10 - Output</p>  <pre>\nInception\nThe Matrix\nInterstellar\nThe Dark Knight\nPulp Fiction\n</pre>  <p> </p> <p>2. Using <code>enumerate()</code> <p>Example 8.2.11 - If you need to access both the index and the value of each item in the list, you can use the <code>enumerate()</code> function.  <pre><code># List of favourite movies\nfavourite_movies = ['Inception', 'The Matrix', 'Interstellar', 'The Dark Knight', 'Pulp Fiction']\n\n# Loop through each movie in the list with index\nfor index, movie in enumerate(favourite_movies):\n    print(f\"{index}: {movie}\")\n</code></pre></p> <p>Example 8.2.11 - Output</p>  <pre>\n0: Inception\n1: The Matrix\n2: Interstellar\n3: The Dark Knight\n4: Pulp Fiction\n</pre>  <p> </p> <p>3. Using a <code>while</code> Loop <p>Example 8.2.12 - You can also use a <code>while</code> loop to iterate over a list. This is less common but useful in some scenarios.</p> <pre><code># List of favourite movies\nfavourite_movies = ['Inception', 'The Matrix', 'Interstellar', 'The Dark Knight', 'Pulp Fiction']\n\n# Initialize index\nindex = 0\n\n# Loop through the list using a while loop\nwhile index &lt; len(favourite_movies):\n    print(favourite_movies[index])\n    index += 1\n</code></pre> <p>Example 8.2.12 - Output</p>  <pre>\nInception\nThe Matrix\nInterstellar\nThe Dark Knight\nPulp Fiction\n</pre>  <p> </p> <p>There are more advanced ways to access lists like list comprehensions and <code>map()</code> function which are out of the scope of this course.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.2-Lists/#82e-develop-a-program-using-lists-as-data-structures","title":"8.2e Develop a program using lists as data structures <p>Exercise 8.2.1 - Given the following list of favourite books: <p><code>favourite_books = ['How it All Blew Up', 'The Kite Runner', 'The Time Machine', 'The Hunger Games', 'The Fault in Our Stars']</code></p> <p>Perform the following tasks:</p> <ol> <li>Add the book 'Pride and Prejudice' to the end of the list.</li> <li>Insert the book 'To Kill a Mockingbird' at the second position in the list.</li> <li>Count how many times the book 'To Kill a Mockingbird' appears in the list.</li> <li>Remove the last book from the list.</li> <li>Reverse the order of the list.</li> <li>Sort the list in alphabetical order.</li> <li>Print the final list.</li> </ol> <p>Write the complete program and show the output at each step.</p>  <p><sub>Exercise 8.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"08.Data-structures/8.3-Tuples/","title":"8.3 Tuples","text":""},{"location":"08.Data-structures/8.3-Tuples/#83a-what-are-python-tuples","title":"8.3a What are Python tuples? <p>A tuple is a built-in data structure in Python that is used to store an ordered collection of items. Unlike lists, tuples are immutable, meaning that once a tuple is created, its elements cannot be changed, added, or removed.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.3-Tuples/#83b-why-do-we-use-tuples","title":"8.3b Why do we use tuples? <p>We use tuples for several reasons:</p> <ul> <li>Immutability - Since tuples cannot be modified after creation, they can be used to ensure that data remains constant throughout the program.</li> <li>Performance - Tuples are generally faster than lists because of their immutability.</li> <li>Integrity - They can be used as keys in dictionaries, while lists cannot.</li> <li>Readability - Tuples can represent a fixed collection of related items, enhancing code clarity and readability.</li> </ul> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.3-Tuples/#83c-how-do-we-use-tuples","title":"8.3c How do we use tuples? <p>Here are some examples demonstrating the use of tuples and the functions that can be used with them:</p> <p>Example 8.3.1 - Creating a tuple.</p> <pre><code># Creating a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n</code></pre> <p>Example 8.3.1 - Output</p>  <pre>\n(1, 2, 3, 4, 5)\n</pre>  <p> </p> <p>Example 8.3.2 - Accessing elements.</p> <pre><code># Accessing elements by index\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple[0])\nprint(my_tuple[1:3])\n</code></pre> <p>Example 8.3.2 - Output</p>  <pre>\n1\n(2, 3)\n</pre>  <p> </p> <p>Example 8.3.3 - <code>count(item)</code> - Returns the number of times an item appears in the tuple.</p> <pre><code>my_tuple = (1, 2, 3, 2, 2, 4, 5)\ncount_twos = my_tuple.count(2)\nprint(count_twos)\n</code></pre> <p>Example 8.3.3 - Output</p>  <pre>\n3\n</pre>  <p> </p> <p>Example 8.3.4 - <code>len()</code> - Returns the number of items in the tuple.</p> <pre><code>my_tuple = (1, 2, 3, 2, 2, 4, 5)\nlength = len(my_tuple)\nprint(length)\n</code></pre> <p>Example 8.3.4 - Output</p>  <pre>\n7\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.3-Tuples/#83d-note-on-functions-not-applicable-to-tuples","title":"8.3d Note on functions not applicable to tuples <p>In contrast to lists, the following functions are not applicable to tuples because of their immutability:</p> <ul> <li><code>append(item)</code> - Tuples do not support item addition after creation.</li> <li><code>clear()</code> - Tuples do not support clearing all elements.</li> <li><code>insert(index, item)</code> - Tuples do not support item insertion.</li> <li><code>pop([index])</code> - Tuples do not support removing items by index.</li> <li><code>remove(item)</code> - Tuples do not support removing items by value.</li> <li><code>reverse()</code> - Tuples do not support reversing their order in place.</li> <li><code>sort()</code> - Tuples do not support sorting their elements in place.</li> </ul> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.3-Tuples/#83e-looping-through-a-tuple-in-python","title":"8.3e Looping through a tuple in Python <p>Looping through a tuple in Python is similar to looping through a list. You can use several methods to iterate over the elements of a tuple:</p> <p>1. Using a <code>for</code> loop <p>Example 8.3.5 - The <code>for</code> loop is the most straightforward way to iterate over each item in a list.</p> <p><pre><code># Define a tuple\nmy_tuple = (1, 2, 3, 4, 5)\n\n# Loop through each element in the tuple\nfor item in my_tuple:\n    print(item)\n</code></pre> Example 8.3.5 - Output</p>  <pre>\n1\n2\n3\n4\n5\n</pre>  <p> </p> <p>2. Using <code>enumerate()</code> <p>Example 8.3.6 - If you need to access both the index and the value of each item in the tuple, you can use the <code>enumerate()</code> function. <pre><code># Define a tuple\nmy_tuple = ('apple', 'banana', 'cherry')\n\n# Loop through the tuple with index\nfor index, item in enumerate(my_tuple):\n    print(f\"Index: {index}, Item: {item}\")\n</code></pre></p> <p>Example 8.3.6 - Output</p>  <pre>\nIndex: 0, Item: apple\nIndex: 1, Item: banana\nIndex: 2, Item: cherry\n</pre>  <p> </p> <p>3. Using a <code>while</code> Loop <p>Example 8.3.7 - You can also use a <code>while</code> loop to iterate over a list. This is less common but useful in some scenarios.</p> <pre><code># Define a tuple\nmy_tuple = (10, 20, 30, 40, 50)\n\n# Initialize the index\nindex = 0\n\n# Loop through the tuple using a while loop\nwhile index &lt; len(my_tuple):\n    print(my_tuple[index])\n    index += 1\n</code></pre> <p>Example 8.3.7 - Output</p>  <pre>\n10\n20\n30\n40\n50\n</pre>  <p> </p> <p>Looping through a tuple in Python is simple and can be done using various methods such as a <code>for</code> loop, <code>enumerate()</code>, or a <code>while</code> loop. Each method has its own use case and can be chosen based on the specific requirements of your program.</p> <p> </p>  <p> </p>  <p>Note</p> <p>Python tuples are immutable, ordered collections of items. They are used when a collection of items needs to remain constant and unchanged throughout the program. Key functions that can be used with tuples include <code>count(item)</code> and <code>len()</code>.</p>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.3-Tuples/#83f-develop-a-program-using-lists-as-data-structures","title":"8.3f Develop a program using lists as data structures <p>Exercise 8.3.1 - Given the following tuple of rainbow colours: <p><code>rainbow_colours = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')</code></p> <p>Perform the following tasks:</p> <ul> <li> Loop through the tuple and print each colour.</li> <li> Print the length of the tuple.</li> <li> Count how many times the colour 'blue' appears in the tuple.</li> <li> Use a loop with <code>enumerate()</code> to print the index and colour.</li> <li> Create a new tuple that contains only the colours from the third to the sixth position (inclusive) of the original tuple, and print the new tuple.</li> </ul> <p>Write the complete program and show the output for each step.</p>  <p><sub>Exercise 8.3.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/","title":"8.4 Dictionaries","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84a-what-are-python-dictionaries","title":"8.4a What are Python dictionaries? <p>A dictionary in Python is a collection of key-value pairs. Each key is unique and maps to a value. Dictionaries are mutable, meaning you can change their content by adding, removing, or updating key-value pairs. They are unordered until Python 3.7, where they maintain insertion order.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84b-why-do-we-use-python-dictionaries","title":"8.4b Why do we use Python dictionaries? <p>Dictionaries are used for various reasons:</p> <ul> <li>Fast Lookup - Dictionaries allow for fast retrieval of values when you know the key.</li> <li>Data Organization - They help in organizing data into key-value pairs, which is more readable and logical.</li> <li>Flexible Data Storage - They can store any data type (numbers, strings, lists, other dictionaries, etc.) as values.</li> </ul> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84c-how-do-we-use-python-dictionaries","title":"8.4c How do we use Python dictionaries?  <ul> <li>How do we create a dictionary?</li> </ul> <p>Example 8.4.1 - Creating a dictionary.</p> <pre><code># Creating an empty dictionary\nmy_dict = {}\n\n# Creating a dictionary with initial key-value pairs\nstudent = {\n    'name': 'Alice',\n    'age': 21,\n    'major': 'Computer Science'\n}\n</code></pre> <p> </p> <ul> <li>How do we access an item from a dictionary?</li> </ul> <p>Example 8.4.2 - Accessing items from a dictionary.</p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 21,\n    'major': 'Computer Science'\n}\n\n# Accessing a value by key\nname = student['name']\nprint(f\"Name: {name}\")\n\n# Using get() method to access value\nage = student.get('age')\nprint(f\"Age: {age}\")\n</code></pre> <p>Example 8.4.2 - Output</p>  <pre>\nName: Alice\nAge: 21\n</pre>  <p> </p> <ul> <li>How do we add or update an item in a dictionary?</li> </ul> <p>Example 8.4.3 - Adding or updating items.</p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 21,\n    'major': 'Computer Science'\n}\n\n# Adding a new key-value pair\nstudent['GPA'] = 3.8\n\n# Updating an existing key-value pair\nstudent['age'] = 22\n</code></pre> <p> </p> <ul> <li>How do we remove an item from a dictionary?</li> </ul> <p>Example 8.4.4 - Removing items.</p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n    'major': 'Computer Science',\n    'GPA': '3.8'\n}\n\n# Using pop() method to remove an item by key and return its value\nmajor = student.pop('major')\nprint(f\"Major: {major}\")\n\n# Using del statement to remove an item by key\ndel student['GPA']\n</code></pre> <p>Example 8.4.4 - Output</p>  <pre>\nMajor: Computer Science\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84d-useful-dictionary-functions","title":"8.4d Useful dictionary functions  <ul> <li><code>keys()</code> - Returns a view object containing the keys of the dictionary.</li> </ul> <p>Example 8.4.5 - <code>keys()</code></p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n}\n\nkeys = student.keys()\nprint(keys)\n</code></pre> <p>Example 8.4.5 - Output</p>  <pre>\ndict_keys(['name', 'age'])\n</pre>  <p> </p> <ul> <li><code>values()</code> - Returns a view object containing the values of the dictionary.</li> </ul> <p>Example 8.4.6 - <code>values()</code></p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n}\n\nvalues = student.values()\nprint(values)\n</code></pre> <p>Example 8.4.6 - Output</p>  <pre>\ndict_values(['Alice', 22])\n</pre>  <p> </p> <ul> <li><code>items()</code> - Returns a view object containing the key-value pairs of the dictionary.</li> </ul> <p>Example 8.4.7 - <code>items()</code></p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n}\n\nitems = student.items()\nprint(items)\n</code></pre> <p>Example 8.4.7 - Output</p>  <pre>\ndict_items([('name', 'Alice'), ('age', 22)])\n</pre>  <p> </p> <ul> <li><code>clear()</code> - Removes all items from the dictionary.</li> </ul> <p>Example 8.4.8 - <code>clear()</code></p> <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n}\n\n\nstudent.clear()\nprint(student)\n</code></pre> <p>Example 8.4.8 - Output</p>  <pre>\n{}\n</pre>  <p> </p> <ul> <li><code>update()</code> - Updates the dictionary with elements from another dictionary or an iterable of key-value pairs.</li> </ul> <p>Example 8.4.9 - <code>update()</code></p> <pre><code>student.update({'name': 'Bob', 'age': 25})\nprint(student)\n</code></pre> <p>Example 8.4.9 - Output</p>  <pre>\n{'name': 'Bob', 'age': 25}\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84d-looping-over-dictionary-items","title":"8.4d - Looping over dictionary items  <ul> <li>Looping through keys</li> </ul> <p>Example 8.4.10</p> <p><pre><code>student = {'name': 'Alice', 'age': 21, 'major': 'Computer Science'}\n\nfor key in student.keys():\n    print(f\"Key: {key}\")\n</code></pre> Example 8.4.10 - Output</p>  <pre>\nKey: name\nKey: age\nKey: major\n</pre>  <p> </p> <ul> <li>Looping through values</li> </ul> <p>Example 8.4.11 <pre><code>student = {'name': 'Alice', 'age': 21, 'major': 'Computer Science'}\n\nfor value in student.values():\n    print(f\"Value: {value}\")\n</code></pre> Example 8.4.11 - Output</p>  <pre>\nValue: Alice\nValue: 21\nValue: Computer Science\n</pre>  <p> </p> <ul> <li>Looping through key-value pairs</li> </ul> <p>Example 8.4.12</p> <pre><code>student = {'name': 'Alice', 'age': 21, 'major': 'Computer Science'}\n\nfor key, value in student.items():\n    print(f\"Key: {key}, Value: {value}\")\n</code></pre> <p>Example 8.4.12 - Output</p>  <pre>\nKey: name, Value: Alice\nKey: age, Value: 21\nKey: major, Value: Computer Science\n</pre>  <p> </p>  <p> </p>  <p>Note</p> <p>Python dictionaries are collections of key-value pairs that are used for organizing and managing data efficiently. They allow for fast lookups, flexible data storage, and logical data organization. Some of the useful functions for dictionaries include <code>keys()</code>, <code>values()</code>, <code>items()</code>, <code>clear()</code>, and <code>update()</code>. Accessing items can be done using keys directly or with the get() method. Looping over dictionary items can be done through their keys, values, or key-value pairs.</p>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.4-Dictionaries/#84e-develop-a-program-using-dictionaries-as-data-structures","title":"8.4e Develop a program using dictionaries as data structures <p>Exercise 8.4.1 - Given the following dictionary that contains the names and ages of a group of friends: <pre><code>friends = {\n    'Alice': 23,\n    'Bob': 25,\n    'Charlie': 22,\n    'Daisy': 24\n}\n</code></pre> <p>Perform the following tasks:</p> <ul> <li> Add a new friend to the dictionary: 'Eve', who is 26 years old.</li> <li> Update the age of 'Charlie' to 23.</li> <li> Remove 'Daisy' from the dictionary.</li> <li> Print all the names (keys) of the friends.</li> <li> Print all the ages (values) of the friends.</li> <li> Print each friend's name along with their age using a loop.</li> </ul> <p>Write the complete program and show the output for each step.</p>  <p><sub>Exercise 8.4.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"08.Data-structures/8.5-Membership-operators/","title":"8.5 Membership operators","text":""},{"location":"08.Data-structures/8.5-Membership-operators/#85a-what-are-python-membership-operators","title":"8.5a What are Python membership operators <p>Membership operators in Python are used to test whether a value or variable is found in a sequence (such as a string, list, tuple, set, or dictionary). They are essential for tasks like searching, validating input, and controlling program flow based on the existence of values in data structures. These operators help make your code more efficient and readable when dealing with collections of data. The primary membership operators are:</p> <ul> <li>in - Returns <code>True</code> if the specified value is present in the sequence.</li> </ul> <p>Example 8.5.1</p> <pre><code>'a' in 'apple' \n</code></pre> <p>Example 8.5.1 - Output</p>  <pre>\nTrue\n</pre>  <p> </p> <ul> <li>not in - Returns <code>True</code> if the specified value is not present in the sequence.</li> </ul> <p>Example 8.5.2</p> <pre><code>'b' not in 'apple' \n</code></pre> <p>Example 8.5.2 - Output</p>  <pre>\nTrue\n</pre>  <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.5-Membership-operators/#85b-why-do-we-use-membership-operators","title":"8.5b Why do we use membership operators? <p>Membership operators are used to check for the presence or absence of values in sequences. They are very useful for tasks like validating input, searching within data structures, and controlling the flow of programs based on whether certain values are present.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.5-Membership-operators/#85c-interpret-a-program-snippet-that-includes-membership-operators","title":"8.5c Interpret a program snippet that includes membership operators <p>Example 8.5.3 - Here\u2019s a simple example to demonstrate how membership operators can be used in Python.</p> <pre><code># Examples of membership operators\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Using 'in' to check if a value is in a list\nif \"banana\" in fruits:\n    print(\"Banana is in the list of fruits.\")  # This will be printed\n\n# Using 'not in' to check if a value is not in a list\nif \"grape\" not in fruits:\n    print(\"Grape is not in the list of fruits.\")  # This will be printed\n</code></pre> <p>Example 8.5.3 - Explanation</p> <ul> <li> <p><code>\"banana\" in fruits</code>:</p> <ul> <li>Condition: Checks if the string <code>\"banana\"</code> is present in the list <code>fruits</code>.</li> <li>Result: Since <code>\"banana\"</code> is in the list, the condition is <code>True</code> and it prints \"Banana is in the list of fruits.\"</li> </ul> </li> <li> <p><code>\"grape\" not in fruits</code>:</p> <ul> <li>Condition: Checks if the string <code>\"grape\"</code> is not present in the list <code>fruits</code>.</li> <li>Result: Since <code>\"grape\"</code> is not in the list, the condition is <code>True</code> and it prints \"Grape is not in the list of fruits.\"</li> </ul> </li> </ul> <p> </p>  <p> </p> <p>Exercise 8.5.1 - Write a Python program that checks if a user's favorite colour is available in a list of available colours. Use the <code>in</code> and <code>not in</code> membership operators to implement the following rules: <ul> <li> The program should have a predefined list of available colours: <code>[\"red\", \"blue\", \"green\", \"yellow\"]</code>.</li> <li> Ask the user to input their favorite colour.</li> <li> Convert the user's input to lowercase to handle case insensitivity.</li> <li> Check if the user's favorite colour is in the list of available colours.</li> <li> If the colour is in the list, print a message saying that the colour is available.</li> <li> If the colour is not in the list, print a message saying that the colour is not available.</li> </ul>  <p><sub>Exercise 8.5.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/","title":"8.6 Random module with data structures","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/#86a-overview-of-the-python-random-module","title":"8.6a Overview of the Python random module <p>The Python <code>random</code> module is used to generate pseudo-random numbers for various distributions. It provides functions to generate random numbers, shuffle data, and select random elements from sequences like lists and tuples.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/#86b-using-randintstart-stop","title":"8.6b Using <code>randint(start, stop)</code> <p>The randint(start, stop) function returns a random integer <code>N</code> such that <code>start &lt;= N &lt;= stop</code>.</p> <p>Example 8.6.1 - randint(start, stop) <pre><code>import random\n\n# Generate a random integer between 1 and 10 (inclusive)\nrandom_number = random.randint(1, 10)\nprint(f\"Random number between 1 and 10: {random_number}\")\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/#86c-using-random-module-with-data-structures","title":"8.6c Using random module with data structures  <ul> <li><code>choice(seq)</code> - The choice(seq) function returns a randomly selected element from the non-empty sequence seq.</li> </ul> <p>Example 8.6.1 - random choice with a list <pre><code>import random\n\nfruits = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\n# Select a random fruit\nrandom_fruit = random.choice(fruits)\nprint(f\"Random fruit: {random_fruit}\")\n</code></pre></p> <p> </p> <p>Example 8.6.2 - random choice with a tuple</p> <pre><code>import random\n\ncolors = ('red', 'green', 'blue', 'yellow', 'purple')\n\n# Select a random color\nrandom_color = random.choice(colors)\nprint(f\"Random color: {random_color}\")\n</code></pre> <p> </p> <ul> <li><code>shuffle(seq)</code> - The shuffle(seq) function randomly shuffles the elements of the list seq in place. Note that it works only with lists, not tuples.</li> </ul> <p>Example 8.6.3 - random shuffle a list</p> <pre><code>import random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Shuffle the list\nrandom.shuffle(numbers)\nprint(f\"Shuffled numbers: {numbers}\")\n</code></pre> <p> </p> <ul> <li><code>sample(seq, k)</code> - The sample(seq, k) function returns a new list containing k unique elements randomly chosen from the sequence seq.</li> </ul> <p>Example 8.6.4 - random sample from a list <pre><code>import random\n\nletters = ['a', 'b', 'c', 'd', 'e', 'f']\n\n# Select 3 random unique letters\nrandom_letters = random.sample(letters, 3)\nprint(f\"Random letters: {random_letters}\")\n</code></pre></p> <p> </p> <p>Example 8.6.5 - random sample from a tuple <pre><code>import random\n\nanimals = ('cat', 'dog', 'elephant', 'giraffe', 'horse')\n\n# Select 2 random unique animals\nrandom_animals = random.sample(animals, 2)\nprint(f\"Random animals: {random_animals}\")\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/#86d-random-module-summary","title":"8.6d Random module summary <p>The Python <code>random</code> module provides functions for generating random numbers and manipulating data structures.</p> <ul> <li><code>randint(start, stop)</code> - Generates a random integer between <code>start</code> and <code>stop</code>.</li> <li><code>choice(seq)</code> - Selects a random element from a sequence (list or tuple).</li> <li><code>shuffle(seq)</code> - Randomly shuffles a list in place.</li> <li><code>sample(seq, k)</code> - Returns a list of <code>k</code> unique elements randomly chosen from a sequence (list or tuple).</li> </ul> <p>By using these functions, you can easily generate random values and manipulate data structures in various ways.</p> <p> </p>  <p> </p>","text":""},{"location":"08.Data-structures/8.6-Random-module-with-data-structures/#86e-develop-a-program-using-random-module","title":"8.6e Develop a program using <code>random</code> module <p>Exercise 8.6.1 - Create a small guessing game using the Python random module and decision statements. The game should follow these steps: <ol> <li>Generate a random number between 1 and 20.</li> <li>Ask the user to guess the number.</li> <li>Provide feedback if the guess is too low, too high, or correct.</li> <li>Allow the user to keep guessing until they get the correct number.</li> <li>Print the number of attempts it took to guess the correct number.</li> </ol>  <p><sub>Exercise 8.6.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"08.Data-structures/8.7-Data-structures-quiz/","title":"8.7 Data structures quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"09.Graphical-interface/9.1-Turtle-module/","title":"9.1 Turtle module","text":"<p>The Python <code>turtle</code> module provides a fun way to introduce programming to beginners through simple drawing and graphics. It allows you to control a <code>turtle</code>, which can move around the screen, drawing lines as it goes. This topic will guide you through the basics of using the <code>turtle</code> module.</p> <p> </p>"},{"location":"09.Graphical-interface/9.1-Turtle-module/#91a-getting-started","title":"9.1a Getting started <p>1.Import the turtle module: <pre><code>import turtle\n</code></pre> <p> </p> <p>2.Create a turtle object: <pre><code># Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n</code></pre> <p> </p> <p>3.Move the turtle: <ul> <li>Move forward: <pre><code>my_turtle.forward(100)  # Move forward by 100 units\n</code></pre></li> <li> <p>Turn left: <pre><code>my_turtle.left(90)  # Turn left by 90 degrees\nmy_turtle.forward(100)\n</code></pre></p> </li> <li> <p>Turn right: <pre><code>my_turtle.right(90)  # Turn right by 90 degrees\nmy_turtle.forward(100)\n</code></pre></p> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.1-Turtle-module/#91b-drawing-shapes","title":"9.1b Drawing shapes <p>1.Drawing a square: <pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nfor _ in range(4):\n    my_turtle.forward(100)\n    my_turtle.right(90)\n\nturtle.done()  # Finish the drawing\n</code></pre> <p> </p> <p>2.Drawing a triangle: <pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nfor _ in range(3):\n    my_turtle.forward(100)\n    my_turtle.left(120)\n\nturtle.done()\n</code></pre> <p> </p> <p>3.Drawing a circle: <pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nmy_turtle.circle(50)  # Draw a circle with radius 50\n\nturtle.done()\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.1-Turtle-module/#91c-changing-turtle-attributes","title":"9.1c Changing turtle attributes <p>1.Changing the pen colour: <p><pre><code>my_turtle.pencolor(\"blue\")\nmy_turtle.forward(100)\n</code></pre> </p> <p>2.Changing the pen size: <p><pre><code>my_turtle.pensize(5)\nmy_turtle.forward(100)\n</code></pre> </p> <p>3.Changing the turtle speed: <pre><code>my_turtle.speed(1)  # Slowest\nmy_turtle.forward(100)\n\nmy_turtle.speed(10)  # Fastest\nmy_turtle.forward(100)\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.1-Turtle-module/#91d-advanced-drawing","title":"9.1d Advanced drawing <p>1.Drawing a star: <p><pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nfor _ in range(5):\n    my_turtle.forward(100)\n    my_turtle.right(144)\n\nturtle.done()\n</code></pre> </p> <p>2.Using loops for patterns: <pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nfor _ in range(36):\n    my_turtle.forward(100)\n    my_turtle.right(170)\n\nturtle.done()\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.1-Turtle-module/#91e-handling-user-events","title":"9.1e Handling User Events <p>1.Closing the window on click: <pre><code>import turtle\n\nscreen = turtle.Screen()\nmy_turtle = turtle.Turtle()\n\nmy_turtle.circle(50)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.1-Turtle-module/#91f-putting-it-all-together","title":"9.1f Putting it all together <p>Example 9.1.1 - Here's a complete example that combines several concepts.</p> <pre><code>import turtle\n\n# Set up the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"lightyellow\")\n\n# Create a turtle\nmy_turtle = turtle.Turtle()\nmy_turtle.shape(\"turtle\")\nmy_turtle.color(\"green\")\nmy_turtle.speed(5)\n\n# Draw a square\nfor _ in range(4):\n    my_turtle.forward(100)\n    my_turtle.right(90)\n\n# Move the turtle to a new position without drawing\nmy_turtle.penup()\nmy_turtle.goto(-150, 0)\nmy_turtle.pendown()\n\n# Draw a circle\nmy_turtle.pencolor(\"blue\")\nmy_turtle.circle(50)\n\n# Move the turtle to a new position without drawing\nmy_turtle.penup()\nmy_turtle.goto(150, 0)\nmy_turtle.pendown()\n\n# Draw a star\nmy_turtle.pencolor(\"red\")\nfor _ in range(5):\n    my_turtle.forward(100)\n    my_turtle.right(144)\n\n# Finish drawing\nturtle.done()\n</code></pre> <p> </p>  <p> </p>  <p>Note</p> <p>This topic covers the basics of the turtle module, including creating a turtle, moving it around, drawing shapes, and customizing its attributes. The turtle module is a great way to start learning Python and practicing programming concepts in a visual and interactive way. Experiment with different shapes, colors, and patterns to get a feel for what you can create! You can also check this more in-depth tutorial on how to use the turtle module.</p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.2-Tkinter-module/","title":"9.2 Tkinter module","text":"<p>The Python Tkinter module is a standard library used for creating graphical user interfaces (GUIs) in Python applications. It provides a range of tools (widgets) such as buttons, labels, text boxes, and more, which can be used to design and build interactive windows and forms. Tkinter allows developers to add visual elements and respond to user events like clicks and key presses, making it easier to create user-friendly applications.</p> <p> </p>"},{"location":"09.Graphical-interface/9.2-Tkinter-module/#92a-getting-started-installing-tkinter","title":"9.2a Getting started installing Tkinter <p>If you are using a standard Python installation, Tkinter is usually included. To verify if Tkinter is installed, you can try importing it in Python. For this topic make sure to use Thonny IDE since the Tkinter module is not supported by trinket.io.</p> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.2-Tkinter-module/#92b-basic-tkinter-application","title":"9.2b Basic Tkinter application <p>Let\u2019s create a basic Tkinter window with this step-by-step guide.</p> <ol> <li> <p>Import Tkinter module - Import the Tkinter module (note that in Python 3.x, it\u2019s tkinter with a lowercase 't').</p> </li> <li> <p>Create the main window - Create the main application window.</p> </li> <li> <p>Add widgets to the window - Widgets are the elements that make up the GUI (buttons, labels, text boxes, etc.).</p> </li> <li> <p>Start the main loop - The main loop waits for events (such as button clicks) and updates the GUI accordingly.</p> </li> </ol> <p>Example 9.2.1 - Here\u2019s a simple example with Tkinter module</p> <pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Set the window title\nroot.title(\"My Tkinter App\")\n\n# Set the window size\nroot.geometry(\"300x200\")\n\n# Add a label widget\nlabel = tk.Label(root, text=\"Hello, Tkinter!\")\nlabel.pack(pady=20)  # pady adds vertical padding\n\n# Add a button widget\nbutton = tk.Button(root, text=\"Click Me\", command=lambda: print(\"Button clicked!\"))\nbutton.pack(pady=20)\n\n# Start the main loop\nroot.mainloop()\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.2-Tkinter-module/#92c-adding-more-widgets","title":"9.2c Adding more widgets <p>Tkinter provides a variety of widgets. Here are a few common ones:</p> <ul> <li>Labels - Display text or images.</li> <li>Buttons - Perform an action when clicked.</li> <li>Entries - Single-line text boxes.</li> <li>Text - Multi-line text boxes.</li> <li>Checkbuttons - Checkbox widgets.</li> <li>Radiobuttons - Radio button widgets.</li> <li>Listboxes - List of selectable items.</li> </ul> <p> </p> <p>Example 9.2.2 - with multiple widgets <pre><code>import tkinter as tk\n\ndef on_button_click():\n    label.config(text=\"Button Clicked!\")\n\nroot = tk.Tk()\nroot.title(\"Widget Example\")\nroot.geometry(\"400x300\")\n\nlabel = tk.Label(root, text=\"Welcome to Tkinter!\")\nlabel.pack(pady=10)\n\nentry = tk.Entry(root)\nentry.pack(pady=10)\n\nbutton = tk.Button(root, text=\"Click Me\", command=on_button_click)\nbutton.pack(pady=10)\n\ncheckbutton = tk.Checkbutton(root, text=\"Check me\")\ncheckbutton.pack(pady=10)\n\nradio_value = tk.IntVar()\nradiobutton1 = tk.Radiobutton(root, text=\"Option 1\", variable=radio_value, value=1)\nradiobutton2 = tk.Radiobutton(root, text=\"Option 2\", variable=radio_value, value=2)\nradiobutton1.pack(pady=5)\nradiobutton2.pack(pady=5)\n\nlistbox = tk.Listbox(root)\nlistbox.insert(1, \"Item 1\")\nlistbox.insert(2, \"Item 2\")\nlistbox.insert(3, \"Item 3\")\nlistbox.pack(pady=10)\n\nroot.mainloop()\n</code></pre></p> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.2-Tkinter-module/#92d-layout-management","title":"9.2d Layout Management <p>Tkinter provides three layout managers:</p> <ul> <li>pack() - Packs widgets in order.</li> <li>grid() - Places widgets in a grid (rows and columns).</li> <li>place() - Places widgets at an absolute position.</li> </ul> <p> </p> <p>Example 9.2.3 - Using <code>grid()</code></p> <pre><code>import tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Grid Layout Example\")\nroot.geometry(\"300x200\")\n\ntk.Label(root, text=\"Name:\").grid(row=0, column=0, padx=10, pady=10)\ntk.Entry(root).grid(row=0, column=1, padx=10, pady=10)\n\ntk.Label(root, text=\"Email:\").grid(row=1, column=0, padx=10, pady=10)\ntk.Entry(root).grid(row=1, column=1, padx=10, pady=10)\n\ntk.Button(root, text=\"Submit\").grid(row=2, column=0, columnspan=2, pady=10)\n\nroot.mainloop()\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"09.Graphical-interface/9.2-Tkinter-module/#92e-event-handling","title":"9.2e Event Handling <p>Events are actions performed by the user, such as mouse clicks or key presses. You can bind events to widgets to make your GUI interactive.</p> <p>Example 9.2.4 - Event binding</p> <pre><code>import tkinter as tk\n\ndef on_key_press(event):\n    label.config(text=f\"Key pressed: {event.char}\")\n\nroot = tk.Tk()\nroot.title(\"Event Binding Example\")\nroot.geometry(\"300x200\")\n\nlabel = tk.Label(root, text=\"Press any key\")\nlabel.pack(pady=20)\n\nroot.bind(\"&lt;KeyPress&gt;\", on_key_press)\n\nroot.mainloop()\n</code></pre> <p> </p>  <p> </p>  <p>Note</p> <p>This should give you a good starting point to explore the capabilities of Tkinter. You can refer to the Tkinter documentation for more detailed information on widgets, layouts, and event handling.</p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/","title":"10.1 Importance of good programming practices","text":"<p>Good programming practices are important because they:</p> <ul> <li>Improve code readability and maintainability.</li> <li>Facilitate debugging and troubleshooting.</li> <li>Promote code reusability.</li> <li>Enable effective team collaboration.</li> <li>Maintain overall code quality.</li> </ul> <p> </p> <p>For the purpose of this course, we should be able to use the following good programming practices.</p>"},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/#101a-inline-comments","title":"10.1a Inline comments <p>In Python, inline comments are comments that appear on the same line as the code and are used to provide brief explanations or clarifications about that specific line of code. Inline comments start with the # symbol and continue until the end of the line.</p> <p>Example 10.1.1 - Example with various inline comments</p> <pre><code>result = 5  # Assigning the value 5 to the variable result\n\nfinal_result = result * 2  # Multiplying result by 2 to get the final result\n\n# Printing the final result\nprint(final_result)\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/#101b-python-block-comments","title":"10.1b Python block comments <p>Block comments in Python are used to provide explanations or descriptions for a section of code, rather than a single line. They help in documenting what the code does and why certain decisions were made. Block comments are particularly useful for complex sections of code or for providing overall context.</p> <p>Example 10.1.2 - Using block comments in Python</p> <pre><code># This function calculates the area of a rectangle.\n# It takes two parameters:\n# - width: The width of the rectangle.\n# - height: The height of the rectangle.\n# The function returns the area by multiplying\n# the width and height.\n\ndef calculate_rectangle_area(width, height):\n    return width * height\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/#101c-multi-line-strings-or-docstrings","title":"10.1c Multi-line strings or docstrings <p>Use triple quotes (''' or \"\"\") for docstrings, which provide documentation for modules, classes, and functions, and can be accessed programmatically.</p> <p>Sometimes the triple quotes are used for block comments but that it is not a good practice and one should use # for regular comments, including block comments, as they are intended to be brief explanations for developers and are ignored by the interpreter. Whereas triple quotes, are used to write docstrings, which are a special kind of comment meant to describe modules, functions, classes, or methods.</p> <p>Example 10.1.3 - Multi-line strings or docstrings.</p> <pre><code>def calculate_rectangle_area(width, height):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    width (int, float): The width of the rectangle.\n    height (int, float): The height of the rectangle.\n\n    Returns:\n    int, float: The area of the rectangle.\n    \"\"\"\n    return width * height\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/#101d-code-indentation","title":"10.1d Code indentation <p>Python code indentation refers to the practice of structuring code blocks by using spaces or tabs to visually indicate the level of nesting within the code. In Python, indentation is not just for readability but it is a fundamental part of the language's syntax and determines the structure of the code.</p> <p>Example 10.1.4 - Example of Python code indentation</p> <pre><code>if condition:\n    print(\"This statement is inside the if block\")\n    if nested_condition:\n        print(\"This statement is inside the nested if block\")\n    else:\n        print(\"This statement is inside the else block of the outer if\")\nelse:\n    print(\"This statement is inside the else block\")\n</code></pre> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.1-Importance-of-good-programming-practices/#101e-meaningful-variable-names","title":"10.1e Meaningful variable names <p>Meaningful variable names can help with:</p> <ul> <li> <p>Readability - Meaningful variable names make the code easier to read and understand. </p> </li> <li> <p>Maintainability - Code with clear and descriptive variable names is easier to maintain. </p> </li> <li> <p>Debugging - Descriptive variable names can make it easier to identify where something might be going wrong in the code.</p> </li> <li> <p>Documentation - Self-explanatory variable names reduce the need for excessive comments. Good variable names can act as documentation, explaining the purpose of the variable directly in the code.</p> </li> </ul> <p>Example 10.1.5 - Example with non-meaningful variable names</p> <pre><code>x = 10\ny = 20\nz = x + y\n</code></pre> <p>In the above example, it is unclear what x, y, and z represent, making the code harder to understand.</p> <p>Example 10.1.6 - Example with meaningful variable names</p> <pre><code>number_of_apples = 10\nnumber_of_oranges = 20\ntotal_fruit = number_of_apples + number_of_oranges\n</code></pre> <p>In the above example, the variable names clearly describe what they represent, making the code more readable and understandable.</p>","text":""},{"location":"10.Good-programming-practices/10.2-Syntax-logical-and-runtime-errors/","title":"10.2 Syntax logical and runtime errors","text":"<p>When writing and running Python code, you'll encounter different types of errors: syntax errors, logical errors, and runtime errors. Understanding these errors and knowing how to identify and fix them is crucial for debugging and developing robust programs.</p>"},{"location":"10.Good-programming-practices/10.2-Syntax-logical-and-runtime-errors/#102a-syntax-errors","title":"10.2a Syntax errors  <ul> <li>What are syntax errors?</li> </ul> <p>Syntax errors occur when the Python interpreter encounters code that doesn't conform to the language's grammar rules. These errors are detected at compile time, meaning before the program starts running.</p> <p>Example 10.2.1 - Syntax errors</p> <pre><code># Missing a closing parenthesis\nprint(\"Hello, World!\"\n\n# Using an undefined variable name\nx = 10\nprint(y)\n\n# Incorrect indentation\ndef my_function():\nprint(\"Hello\")\n</code></pre> <p> </p> <ul> <li> <p>How to identify and fix syntax errors</p> <ul> <li>Check the error message - Python will provide a traceback with information about where the syntax error occurred.</li> <li>Review the problematic line - Look for common mistakes like missing colons, parentheses, or indentation issues.</li> <li>Use a code editor - Many modern code editors highlight syntax errors as you type.</li> </ul> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.2-Syntax-logical-and-runtime-errors/#102b-logical-errors","title":"10.2b Logical errors <p>\u00a0 - What are logical errors?</p> <p>Logical errors occur when the program runs without crashing, but produces incorrect results. These errors arise from flaws in the program's logic, and they're often the hardest to detect because the program doesn't throw an error message.</p> <p>Example 10.2.2 - Logical errors</p> <p><pre><code># Incorrect calculation logic\ndef calculate_area(length, width):\n    return length + width  # Should be length * width\n\n# Flawed conditional logic\ndef is_even(number):\n    if number % 2 == 1:\n        return True  # Should return False\n    return False\n</code></pre> </p> <ul> <li> <p>How to identify and fix logical errors</p> <ul> <li>Review the algorithm - Ensure the logic of your code aligns with the intended problem-solving approach.</li> <li>Use print statements - Add print statements to check intermediate values and verify that your code behaves as expected.</li> <li>Write tests - Create test cases with known outputs to validate the correctness of your functions.</li> </ul> </li> </ul> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.2-Syntax-logical-and-runtime-errors/#102c-runtime-errors","title":"10.2c Runtime errors <p>\u00a0 - What are runtime errors?</p> <p>Runtime errors occur while the program is running. These errors typically cause the program to crash or behave unexpectedly. They are also known as exceptions.</p> <p>Example 10.2.3 - Runtime errors</p> <pre><code># Division by zero\nx = 10 / 0\n\n# Accessing an undefined index in a list\nmy_list = [1, 2, 3]\nprint(my_list[5])\n\n# Trying to open a non-existent file\nwith open(\"non_existent_file.txt\", \"r\") as file:\n    content = file.read()\n</code></pre> <p> </p> <ul> <li> <p>How to identify and fix runtime errors</p> <ul> <li>Check the error message - Python provides a traceback with information about where the runtime error occurred and what caused it.</li> <li>Use exception handling - Implement try-except blocks to handle potential errors gracefully.</li> </ul> </li> </ul> <p> </p>  <p> </p> <p>Understanding and fixing syntax, logical, and runtime errors is crucial for writing robust Python programs. Syntax errors are caught by the interpreter, logical errors require careful review and testing, and runtime errors can be managed using exception handling. By identifying the type of error and applying the appropriate debugging techniques, you can effectively troubleshoot and correct issues in your code.</p> <p> </p>  <p> </p>","text":""},{"location":"10.Good-programming-practices/10.2-Syntax-logical-and-runtime-errors/#102d-solve-syntax-andor-logical-andor-runtime-errors-in-a-given-algorithm","title":"10.2d Solve syntax and/or logical and/or runtime errors in a given algorithm. <p>Let's consider an example algorithm with syntax, logical, and runtime errors, and demonstrate how to identify and solve them.</p> <p>Exercise 10.2.1 - Function to calculate the average of a list of numbers with faulty code**.  <p>Identify and solve the errors in the algorithm below:</p>  <p><sub>Exercise 10.2.1 - Model Answer - Make sure to work out the exercise before checking the model answer. </sub></p>","text":""},{"location":"10.Good-programming-practices/10.3-Good-programming-practices-quiz/","title":"10.3 Good programming practices quiz","text":"<p>Explore more at Quizizz.</p>"},{"location":"11.Feedback/11.1-Contact-form/","title":"11.1 Contact form","text":"Loading\u2026"}]}